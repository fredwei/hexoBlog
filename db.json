{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/20170512113238.png","path":"images/20170512113238.png","modified":0,"renderable":0},{"_id":"source/images/20170512113631.png","path":"images/20170512113631.png","modified":0,"renderable":0},{"_id":"source/images/20170512114045.png","path":"images/20170512114045.png","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.2d7529.css","path":"main.2d7529.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":0,"renderable":1},{"_id":"source/images/20170512112604.png","path":"images/20170512112604.png","modified":0,"renderable":0},{"_id":"source/images/20170512115239.png","path":"images/20170512115239.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.2d7529.js","path":"main.2d7529.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1489569741840},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1489569741841},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1489569741856},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1489569741856},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1489569741857},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1489569741857},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1489569741858},{"_id":"themes/yilia/_config.yml","hash":"648eaede49a60b0bd33485ccb8c06ab0e88b111e","modified":1490779488276},{"_id":"themes/yilia/package.json","hash":"4631f9013f0b1c5fc5d73af4c3624375bfe4d109","modified":1489569741877},{"_id":"themes/yilia/webpack.config.js","hash":"14fe482547b12b15bc78cb981c42a4ca5b6ba770","modified":1489569741911},{"_id":"source/_data/menu.yml","hash":"c1dcb3d89463bc81f4c86623474c30b5e81f5ea4","modified":1490775456511},{"_id":"source/_posts/2017-03-22-express路由.md","hash":"8114f710aa24c8787cafc68ff35ac306eb51b553","modified":1490319788913},{"_id":"source/_posts/2017-03-23-使用hexo遇到的一个坑.md","hash":"727a2270386967cdf72e6f6bd486b5c3d88420e3","modified":1490242503159},{"_id":"source/_posts/2017-04-13-h5唤醒App.md","hash":"696f8ab4747e640596382ca196818d04daf60261","modified":1493181947684},{"_id":"source/_posts/2017-04-26-vuejs基础入门.md","hash":"30dc9292fc86ad189d0903bcd4cc186237e12fb4","modified":1493180039064},{"_id":"source/_posts/2017-05-12-添加自定义域名.md","hash":"7bc8fe7d2dca0b10ae07b3b3827928b942646692","modified":1494567824696},{"_id":"source/_posts/2017-05-25-workers.md","hash":"073ecb204f673359493527ebc2ef967747031604","modified":1495689251247},{"_id":"source/_posts/2017-12-29-hexo本地开发时默认的4000端口无法访问.md","hash":"4e933700c0e80e51e99221a598670805577dc1f0","modified":1514538647370},{"_id":"source/_posts/2017-03-28-使用webpack构建时给window绑定事件的坑.md","hash":"cb54b4060e2cd74899991abd3d43bcedea8b1800","modified":1490695813624},{"_id":"source/categories/index.md","hash":"0212d250e7d95ce493af54e606aed39f09808e9f","modified":1490778547349},{"_id":"source/images/20170512113238.png","hash":"45094e851221707eee2f6e016c7a6ca9774665bd","modified":1494559965539},{"_id":"source/images/20170512113631.png","hash":"a74f7905297fcafc722b981ba1d343b22d0afafd","modified":1494560199238},{"_id":"source/images/20170512114045.png","hash":"e5ad42cfbb27b8c1c6ca2854c5968373d53853f7","modified":1494560450553},{"_id":"source/images/avatar.jpg","hash":"54841ecafbd8e0fec6353e036238a658f5cb7e07","modified":1490776103044},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1489569741859},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1489569741859},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1489569741859},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1489569741860},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1489569741860},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1489569741861},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1489569741861},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1489569741874},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1489569741875},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1489569741875},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1489569741875},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1489569741876},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1489569741876},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1489569741877},{"_id":"themes/yilia/source/main.2d7529.css","hash":"53e9de1ff840a59a711fe219097e41163fe95a25","modified":1490776290522},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1489569741910},{"_id":"themes/yilia/source/slider.885efe.js","hash":"41a76cb10a2b344d54a15ffac68d17331fc6f3d6","modified":1489569741911},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1489569741878},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1489569741902},{"_id":"source/images/20170512112604.png","hash":"6b7c2f07b517aeaa09629a77e59121b6831bdb9f","modified":1494559595699},{"_id":"source/images/20170512115239.png","hash":"f09cc43e3ee62b9941f9b69005bd6033ca55940a","modified":1494561165466},{"_id":"themes/yilia/source/main.2d7529.js","hash":"a0359e7962038f53f9ffbd02dcc52485f8e04da8","modified":1489569741909},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"61c95c49baa2c1bfd99cf88c55ba205b44bf3d97","modified":1489569741862},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1489569741864},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1489569741864},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1489569741865},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"4767e666849ac2600c7a1cbf94c54cf702864f80","modified":1489569741865},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"db8c42ab7e339c240b7044896a3987555ea9b5b8","modified":1489569741866},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"93e2e6ee3ac45837a1c696023712619967d8e314","modified":1514537487737},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1489569741867},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1489569741867},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1489569741868},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1489572356846},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1489569741868},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1489569741869},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"8c295469bd1602e9d3bbf2fee81ff84cacb1d701","modified":1489569741873},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"538b6d35b25cbdba7dc77feec638336625c8ef8b","modified":1489569741873},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1489569741874},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1489569741902},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1489569741905},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1489569741903},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1489569741905},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1489569741906},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1489569741906},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1489569741907},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1489569741907},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1489569741907},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1489569741878},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1489569741879},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"8a0ae8ee6af8df3f215f1cd4ecc10145a5b92cf0","modified":1489569741879},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"4115c4518cca3f5cf461018aa7a7321138d017cc","modified":1489569741880},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1489569741880},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"9069371dcc65eee63081a21e8a56a9f3dbf64c08","modified":1489569741881},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1489569741881},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"948e44c47c3d70584da93e7ce025dede9b7573d7","modified":1489569741884},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"5dc23be94451d54f0757de85747fd75061e8cf52","modified":1489569741884},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1489569741887},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1489569741888},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1489569741888},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1489569741889},{"_id":"themes/yilia/source-src/css/left.scss","hash":"869d463795c19281188783228acf7ab8f820f93f","modified":1490776328754},{"_id":"themes/yilia/source-src/css/main.scss","hash":"b63c0f9b3bf68efc3bcd7c816bcac6f2fb827528","modified":1489569741891},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1489569741891},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"28a01c3d85ec3194095f96988642a16d461f1077","modified":1489569741891},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1489569741892},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1489569741892},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1489569741893},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1489569741893},{"_id":"themes/yilia/source-src/css/social.scss","hash":"70c2e36b7161717feed1f231271ed693c36407d1","modified":1489569741894},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1489569741894},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1489569741894},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"f5bed08765a8f0a344af5d4781ff822a57028148","modified":1489569741895},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1489569741895},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1489569741896},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1489569741897},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1489569741898},{"_id":"themes/yilia/source-src/js/fix.js","hash":"eccdcc7ee79adebf450bc655b2e80eb6801421a6","modified":1489569741898},{"_id":"themes/yilia/source-src/js/main.js","hash":"93ca570a646c6087821d7b14cb1646bb2a0274f4","modified":1489569741899},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1489569741899},{"_id":"themes/yilia/source-src/js/report.js","hash":"3bcd583315bb7675af427c2376c0b6b2051738cc","modified":1494569462036},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1489569741900},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1489569741900},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1489569741901},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1494569987361},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1489569741869},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1489569741870},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1489569741871},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1489569741870},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1489569741871},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1489569741872},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1489569741872},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1489569741882},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1489569741882},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1489569741883},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1489569741883},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1489569741884},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1489569741885},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1489569741886},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1489569741887},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1489569741887},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1489569741889},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1489569741890},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1489569741890},{"_id":"public/content.json","hash":"5d9d531bf1f57a8f43528275279113a06b4c6a33","modified":1514538888412},{"_id":"public/categories/index.html","hash":"4c430727d3af6667d5dca26c60ee1b475077441c","modified":1514538888961},{"_id":"public/2017/05/25/workers/index.html","hash":"f7d4222b9cdab621ef432aee0c20ca21bf531baa","modified":1514538888985},{"_id":"public/2017/05/12/添加自定义域名/index.html","hash":"55e35299c0de87b74ebccb1488cc7b8bf2b7b7a3","modified":1514538888987},{"_id":"public/2017/04/26/vuejs基础入门/index.html","hash":"fc0ed003ed168a3bab0f624936ce6f781ffb5e28","modified":1514538888987},{"_id":"public/2017/04/13/h5唤醒App/index.html","hash":"4effa73ed766338262abf2f432d61699b3eb93a2","modified":1514538888987},{"_id":"public/2017/03/28/使用webpack构建时给window绑定事件的坑/index.html","hash":"d5c27583585bb05ecc60a4d66e429cdb72d8f669","modified":1514538888987},{"_id":"public/2017/03/23/使用hexo遇到的一个坑/index.html","hash":"8460ed81676dd90159edb7404902aba0e4d009c9","modified":1514538888987},{"_id":"public/2017/03/22/express路由/index.html","hash":"8c2056f2998b80d2996da814c8f44d1474dae04b","modified":1514538888987},{"_id":"public/archives/index.html","hash":"0d6ae6624b5fe702bea3352aa2c6d30c9245a5cc","modified":1514538888988},{"_id":"public/archives/2017/index.html","hash":"a95b6531ea5dfb6d9a7821ae769b9e60cc216158","modified":1514538888988},{"_id":"public/archives/2017/03/index.html","hash":"08aa5e6572bc54414754b456fc0a28add6fd2316","modified":1514538888988},{"_id":"public/archives/2017/04/index.html","hash":"906044f15d1ee2880a0418071c961d33c04e1308","modified":1514538888988},{"_id":"public/archives/2017/05/index.html","hash":"89bfda38674762ffe9df15202f80a2407fcd3020","modified":1514538888988},{"_id":"public/categories/分享/index.html","hash":"801d3e23be583000dc005486b2d0fb0bcd75b1e6","modified":1514538888988},{"_id":"public/categories/填坑/index.html","hash":"a739f3fdd4bd03cedfa6c0a3d7ba5439dbd5a966","modified":1514538888988},{"_id":"public/categories/学习/index.html","hash":"abf7568c36b5c44250f54729a574a370204cc29e","modified":1514538888989},{"_id":"public/categories/学习/笔记/index.html","hash":"770d95ccb4265ed53b6ab50c01971d839e1ea5e4","modified":1514538888989},{"_id":"public/tags/nodejs/index.html","hash":"5fb5de018d890c5e79fbbf4c9c999a67a569b9c1","modified":1514538888989},{"_id":"public/tags/express/index.html","hash":"47044656533b897a0ba15bb1f0cfb743ad36d8d9","modified":1514538888989},{"_id":"public/tags/router/index.html","hash":"39ab1eb305e628fd71dcb5f5d309ec90d013e03f","modified":1514538888989},{"_id":"public/tags/hexo/index.html","hash":"81f5cac14f70c76dbdbafb2f2c6fe9b182452970","modified":1514538888989},{"_id":"public/tags/vuejs/index.html","hash":"8addfd84a11b9e332e60d144b308cea54f95ae02","modified":1514538888990},{"_id":"public/tags/github/index.html","hash":"bea10d483a4962f5bf7f2d55b4dcb946009e3ea4","modified":1514538888990},{"_id":"public/tags/github-pasges/index.html","hash":"1d12dc326e6ef66f8f6c750de988f933fc3a4ac7","modified":1514538888990},{"_id":"public/tags/cname/index.html","hash":"059127f1b65fce6a2f0bebb4ff33b2d5f504d23d","modified":1514538888990},{"_id":"public/tags/html5/index.html","hash":"052de5d63fa0615ef8c3dbdeee21b028a52fdb55","modified":1514538888990},{"_id":"public/tags/workers/index.html","hash":"e35f35e699760c05159da671323f0adeb6763328","modified":1514538888990},{"_id":"public/tags/web-api/index.html","hash":"dbec4aff9c652276ff56f46918bcd2bfef6881da","modified":1514538888990},{"_id":"public/tags/webpack/index.html","hash":"0ebf32f899a20b167e8644be6890752846ac45d6","modified":1514538888990},{"_id":"public/tags/jquery/index.html","hash":"539b6eb0a60bbb92c9b7a72e244edebb6c68edf1","modified":1514538888990},{"_id":"public/2017/12/29/hexo本地开发时默认的4000端口无法访问/index.html","hash":"6a362b4aa67acd389432e0e9febb58c681f27dc5","modified":1514538888991},{"_id":"public/archives/2017/12/index.html","hash":"1dec2c63e86e76b8d975e0cb4409431d76e25c85","modified":1514538888991},{"_id":"public/index.html","hash":"59f2f21d6b276a1669533ba6961f0bc92989b04b","modified":1514538888991}],"Category":[{"name":"分享","_id":"cjbroyd750002posb6yr2m67x"},{"name":"填坑","_id":"cjbroyd7m0007posb6tsrb7sq"},{"name":"学习","_id":"cjbroyd7v000cposb2un3b37q"},{"name":"笔记","parent":"cjbroyd7v000cposb2un3b37q","_id":"cjbroyd80000iposbj8lfnin0"}],"Data":[{"_id":"menu","data":{"Home":"/","Category":"/category/","Gallery":"/gallery/","Archives":"/archives/"}}],"Page":[{"title":"categories","date":"2017-03-29T09:09:07.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-03-29 17:09:07\n---\n","updated":"2017-03-29T09:09:07.349Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjbroyd8p0016posbd3arzcjo","content":"","excerpt":"","more":""}],"Post":[{"title":"Express路由","date":"2017-03-22T08:11:33.000Z","_content":"## 一、简介\n\n>1、Express 是一个基于 Node.js 平台的极简、灵活的web应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。\n\n>2、丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 （ Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架）\n\n>3、Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。\n\n&nbsp;\n\n<!-- more -->\n\n## 二、express环境搭建\n\n1、安装nodejs和npm，建议安装淘宝提供的国内镜像cnpm，这样安装比较快\n\n``` javascript\n$ npm install –g cnpm\n```\n\n2、新建一个目录，在目录下执行\n\n``` javascript\n$ cnpm install express --save\n```\n\n3、express环境已经搭建好了\n\n&nbsp;\n\n## 三、基本路由\n\n1、简单版，除了get请求，还有post、put、delete\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n    res.send('Hello World! <a href=\"/news\">to news</a>');\n});\n\napp.get('/news', function (req, res) {\n    res.send('this is news. <a href=\"/\">back</a>');\n}).post('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a post request!',\n        data: req.query\n    });\n}).put('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a put request!',\n        data: req.query\n    });\n}).delete('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a delete request!',\n        data: req.query\n    });\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n2、字符匹配模式\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 路径\nvar _routeStr = ['start'];\n\nvar _routeList = ['<ol>'];\n_routeList.push('<li>ab?cd（匹配 acd 和 abcd）</li>');\n_routeList.push('<li>ab+cd（匹配 abcd、abbcd、abbbcd等）</li>');\n_routeList.push('<li>ab*cd（匹配 abcd、abxcd、abRABDOMcd、ab123cd等）</li>');\n_routeList.push('<li>ab(cd)?e（匹配 /abe 和 /abcde）</li>');\n_routeList.push('</ol>');\n\n\napp.all('*', function (req, res, next) {\n    console.log('Accessing：' + new Date());\n    _routeStr = ['start'];\n    next();\n});\n\n\n// 匹配 acd 和 abcd\napp.get('/ab?cd', function(req, res, next) {\n  // res.send('ab?cd');\n  _routeStr.push('ab?cd');\n  next();\n});\n\n// 匹配 abcd、abbcd、abbbcd等\napp.get('/ab+cd', function(req, res, next) {\n  // res.send('ab+cd');\n  \n  _routeStr.push('ab+cd');\n  next();\n});\n\n// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等\napp.get('/ab*cd', function(req, res, next) {\n  // res.send('ab*cd');\n  _routeStr.push('ab*cd');\n  next();\n});\n\n// 匹配 /abe 和 /abcde\napp.get('/ab(cd)?e', function(req, res, next) {\n // res.send('ab(cd)?e');\n _routeStr.push('ab(cd)?e');\n next();\n});\n\napp.get('*', function(req, res) {\n    _routeStr.push('end');\n\n    var _html = '<p>' + _routeStr.join('  ====>  ') + '</p>';\n\n    res.send(_routeList.join('') + _html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n3、正则匹配模式\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 路径\nvar _routeStr = ['start'];\n\nvar _routeList = ['<ol>'];\n_routeList.push('<li>/a/（匹配任何路径中含有 a 的路径');\n_routeList.push('<li>/.*fly$/（匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等）</li>');\n_routeList.push('</ol>');\n\n\napp.all('*', function (req, res, next) {\n    console.log('Accessing：' + new Date());\n    _routeStr = ['start'];\n    next();\n});\n\n\n// 匹配任何路径中含有 a 的路径：\napp.get(/a/, function(req, res, next) {\n  _routeStr.push('/a/');\n  next();\n});\n\n// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等\napp.get(/.*fly$/, function(req, res, next) {\n  _routeStr.push('/.*fly$/');\n  next();\n});\n\napp.get('*', function(req, res) {\n    _routeStr.push('end');\n\n    var _html = '<p>' + _routeStr.join('  ====>  ') + '</p>';\n\n    res.send(_routeList.join('') + _html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n3、执行多个回调\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 多个回调函数，需指定执行next\napp.get('/b', function (req, res, next) {\n    console.log('this is function b one');\n    next();\n}, function (req, res) {\n    console.log('this is function b two');\n\n    res.send('Hello from B!');\n});\n\n\n// 多个回调传入，需指定执行next，最后必须有send\nvar cb0 = function (req, res, next) {\n  console.log('CB0');\n  next();\n}\n\nvar cb1 = function (req, res, next) {\n  console.log('CB1');\n  next();\n}\n\nvar cb2 = function (req, res) {\n  res.send('Hello from C!');\n}\n\napp.get('/c', [cb0, cb1, cb2]);\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n&nbsp;\n\n## 四、中间件router\n\n1、通过require导入各种路由配置文件\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n\nvar _router1 = require('./router/r1.js');\nvar _router2 = require('./router/r2.js');\nvar _router3 = require('./router/r3.js');\nvar _router4 = require('./router/r4.js');\n\n\napp.use('/', _router1);\napp.use('/r2', _router2);\napp.use('/r3', _router3);\napp.use('/r4', _router4);\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n2、简单版\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 定义网站主页的路由\nrouter.get('/', function(req, res) {\n  res.send('Birds home page');\n});\n\n// 定义 about 页面的路由\nrouter.get('/about', function(req, res) {\n    res.send('About birds');\n});\n\nmodule.exports = router;\n```\n\n3、通过路由中间件控制\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息\nrouter.use('/user/:id', function(req, res, next) {\n    console.log('Request URL:', req.originalUrl);\n    next();\n}, function (req, res, next) {\n    console.log('Request Type:', req.method);\n    next();\n});\n\n// 一个中间件栈，处理指向 /user/:id 的 GET 请求\nrouter.get('/user/:id', function (req, res, next) {\n    console.log(req.params, req.params.id == 0);\n  // 如果 user id 为 0, 跳到下一个路由\n  if (req.params.id == 0){\n      res.send('ID：' + req.params.id);\n  }\n  // 负责将控制权交给栈中下一个中间件\n  else{\n      next();\n  }\n}, function (req, res, next) {\n    // 渲染常规页面\n    res.send('next function ID：' + req.params.id);\n\n    // 填到下一个路由\n    // next();\n});\n\nmodule.exports = router;\n```\n\n使用`router.param`\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\nvar _pid;\n\nrouter.get('/blog/:pid', function (req, res, next) {\n    console.log('get function');\n});\n\n\nrouter.param('pid', function (req, res, next, pid){\n    console.log('param function');\n    // console.log(req.query);\n\n    setTimeout(function(){\n        _pid = pid;\n\n        res.send('my pid is：' + pid + '&&' + req.query.id);\n    }, 1000);\n\n    next();\n});\n\nmodule.exports = router;\n```\n\n多个参数的情况下\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 无效，可能是版本问题\n// router.param(['id', 'page'], function (req, res, next, value) {\n//   console.log('CALLED ONLY ONCE with', value);\n//   next();\n// })\n\n\nrouter.param('nid', function (req, res, next, value) {\n  console.log('nid：', value);\n  next();\n});\n\nrouter.param('page', function (req, res, next, value) {\n  console.log('page：', value);\n  next();\n});\n\nrouter.get('/news/:nid/:page', function (req, res, next) {\n  console.log('although this matches');\n  next();\n});\n\nrouter.get('/news/:nid/:page', function (req, res) {\n  console.log('and this matches too');\n  res.send('ok');\n});\n\nmodule.exports = router;\n```\n\n&nbsp;\n\n## 五、静态资源目录\n\n也算是属于路由中的一部分，负责静态资源的路径设置\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n\napp.use(express.static(__dirname + '/images'));\napp.use('/pic', express.static(__dirname + '/images'));\napp.use('/img', express.static(__dirname + '/images'));\n\n\napp.get('/img', function (req, res) {\n    var _html = '';\n\n    _html += '<p>/icon.png</p><img src=\"/icon.png\" />';\n    _html += '<p>/pic/icon.png</p><img src=\"/pic/icon.png\" />';\n    _html += '<p>/img/icon.png</p><img src=\"/img/icon.png\" />';\n\n    res.send(_html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n&nbsp;\n\n## 六、实例源码\n\n[github express_demo](https://github.com/ingdanfed/express_demo)","source":"_posts/2017-03-22-express路由.md","raw":"---\ntitle: Express路由\ndate: 2017-03-22 16:11:33\ntags: \n- nodejs\n- express\n- router\ncategories: \n- 分享\n---\n## 一、简介\n\n>1、Express 是一个基于 Node.js 平台的极简、灵活的web应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。\n\n>2、丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 （ Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架）\n\n>3、Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。\n\n&nbsp;\n\n<!-- more -->\n\n## 二、express环境搭建\n\n1、安装nodejs和npm，建议安装淘宝提供的国内镜像cnpm，这样安装比较快\n\n``` javascript\n$ npm install –g cnpm\n```\n\n2、新建一个目录，在目录下执行\n\n``` javascript\n$ cnpm install express --save\n```\n\n3、express环境已经搭建好了\n\n&nbsp;\n\n## 三、基本路由\n\n1、简单版，除了get请求，还有post、put、delete\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n    res.send('Hello World! <a href=\"/news\">to news</a>');\n});\n\napp.get('/news', function (req, res) {\n    res.send('this is news. <a href=\"/\">back</a>');\n}).post('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a post request!',\n        data: req.query\n    });\n}).put('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a put request!',\n        data: req.query\n    });\n}).delete('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a delete request!',\n        data: req.query\n    });\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n2、字符匹配模式\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 路径\nvar _routeStr = ['start'];\n\nvar _routeList = ['<ol>'];\n_routeList.push('<li>ab?cd（匹配 acd 和 abcd）</li>');\n_routeList.push('<li>ab+cd（匹配 abcd、abbcd、abbbcd等）</li>');\n_routeList.push('<li>ab*cd（匹配 abcd、abxcd、abRABDOMcd、ab123cd等）</li>');\n_routeList.push('<li>ab(cd)?e（匹配 /abe 和 /abcde）</li>');\n_routeList.push('</ol>');\n\n\napp.all('*', function (req, res, next) {\n    console.log('Accessing：' + new Date());\n    _routeStr = ['start'];\n    next();\n});\n\n\n// 匹配 acd 和 abcd\napp.get('/ab?cd', function(req, res, next) {\n  // res.send('ab?cd');\n  _routeStr.push('ab?cd');\n  next();\n});\n\n// 匹配 abcd、abbcd、abbbcd等\napp.get('/ab+cd', function(req, res, next) {\n  // res.send('ab+cd');\n  \n  _routeStr.push('ab+cd');\n  next();\n});\n\n// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等\napp.get('/ab*cd', function(req, res, next) {\n  // res.send('ab*cd');\n  _routeStr.push('ab*cd');\n  next();\n});\n\n// 匹配 /abe 和 /abcde\napp.get('/ab(cd)?e', function(req, res, next) {\n // res.send('ab(cd)?e');\n _routeStr.push('ab(cd)?e');\n next();\n});\n\napp.get('*', function(req, res) {\n    _routeStr.push('end');\n\n    var _html = '<p>' + _routeStr.join('  ====>  ') + '</p>';\n\n    res.send(_routeList.join('') + _html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n3、正则匹配模式\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 路径\nvar _routeStr = ['start'];\n\nvar _routeList = ['<ol>'];\n_routeList.push('<li>/a/（匹配任何路径中含有 a 的路径');\n_routeList.push('<li>/.*fly$/（匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等）</li>');\n_routeList.push('</ol>');\n\n\napp.all('*', function (req, res, next) {\n    console.log('Accessing：' + new Date());\n    _routeStr = ['start'];\n    next();\n});\n\n\n// 匹配任何路径中含有 a 的路径：\napp.get(/a/, function(req, res, next) {\n  _routeStr.push('/a/');\n  next();\n});\n\n// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等\napp.get(/.*fly$/, function(req, res, next) {\n  _routeStr.push('/.*fly$/');\n  next();\n});\n\napp.get('*', function(req, res) {\n    _routeStr.push('end');\n\n    var _html = '<p>' + _routeStr.join('  ====>  ') + '</p>';\n\n    res.send(_routeList.join('') + _html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n3、执行多个回调\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 多个回调函数，需指定执行next\napp.get('/b', function (req, res, next) {\n    console.log('this is function b one');\n    next();\n}, function (req, res) {\n    console.log('this is function b two');\n\n    res.send('Hello from B!');\n});\n\n\n// 多个回调传入，需指定执行next，最后必须有send\nvar cb0 = function (req, res, next) {\n  console.log('CB0');\n  next();\n}\n\nvar cb1 = function (req, res, next) {\n  console.log('CB1');\n  next();\n}\n\nvar cb2 = function (req, res) {\n  res.send('Hello from C!');\n}\n\napp.get('/c', [cb0, cb1, cb2]);\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n&nbsp;\n\n## 四、中间件router\n\n1、通过require导入各种路由配置文件\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n\nvar _router1 = require('./router/r1.js');\nvar _router2 = require('./router/r2.js');\nvar _router3 = require('./router/r3.js');\nvar _router4 = require('./router/r4.js');\n\n\napp.use('/', _router1);\napp.use('/r2', _router2);\napp.use('/r3', _router3);\napp.use('/r4', _router4);\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n2、简单版\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 定义网站主页的路由\nrouter.get('/', function(req, res) {\n  res.send('Birds home page');\n});\n\n// 定义 about 页面的路由\nrouter.get('/about', function(req, res) {\n    res.send('About birds');\n});\n\nmodule.exports = router;\n```\n\n3、通过路由中间件控制\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息\nrouter.use('/user/:id', function(req, res, next) {\n    console.log('Request URL:', req.originalUrl);\n    next();\n}, function (req, res, next) {\n    console.log('Request Type:', req.method);\n    next();\n});\n\n// 一个中间件栈，处理指向 /user/:id 的 GET 请求\nrouter.get('/user/:id', function (req, res, next) {\n    console.log(req.params, req.params.id == 0);\n  // 如果 user id 为 0, 跳到下一个路由\n  if (req.params.id == 0){\n      res.send('ID：' + req.params.id);\n  }\n  // 负责将控制权交给栈中下一个中间件\n  else{\n      next();\n  }\n}, function (req, res, next) {\n    // 渲染常规页面\n    res.send('next function ID：' + req.params.id);\n\n    // 填到下一个路由\n    // next();\n});\n\nmodule.exports = router;\n```\n\n使用`router.param`\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\nvar _pid;\n\nrouter.get('/blog/:pid', function (req, res, next) {\n    console.log('get function');\n});\n\n\nrouter.param('pid', function (req, res, next, pid){\n    console.log('param function');\n    // console.log(req.query);\n\n    setTimeout(function(){\n        _pid = pid;\n\n        res.send('my pid is：' + pid + '&&' + req.query.id);\n    }, 1000);\n\n    next();\n});\n\nmodule.exports = router;\n```\n\n多个参数的情况下\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 无效，可能是版本问题\n// router.param(['id', 'page'], function (req, res, next, value) {\n//   console.log('CALLED ONLY ONCE with', value);\n//   next();\n// })\n\n\nrouter.param('nid', function (req, res, next, value) {\n  console.log('nid：', value);\n  next();\n});\n\nrouter.param('page', function (req, res, next, value) {\n  console.log('page：', value);\n  next();\n});\n\nrouter.get('/news/:nid/:page', function (req, res, next) {\n  console.log('although this matches');\n  next();\n});\n\nrouter.get('/news/:nid/:page', function (req, res) {\n  console.log('and this matches too');\n  res.send('ok');\n});\n\nmodule.exports = router;\n```\n\n&nbsp;\n\n## 五、静态资源目录\n\n也算是属于路由中的一部分，负责静态资源的路径设置\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n\napp.use(express.static(__dirname + '/images'));\napp.use('/pic', express.static(__dirname + '/images'));\napp.use('/img', express.static(__dirname + '/images'));\n\n\napp.get('/img', function (req, res) {\n    var _html = '';\n\n    _html += '<p>/icon.png</p><img src=\"/icon.png\" />';\n    _html += '<p>/pic/icon.png</p><img src=\"/pic/icon.png\" />';\n    _html += '<p>/img/icon.png</p><img src=\"/img/icon.png\" />';\n\n    res.send(_html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n&nbsp;\n\n## 六、实例源码\n\n[github express_demo](https://github.com/ingdanfed/express_demo)","slug":"express路由","published":1,"updated":"2017-03-24T01:43:08.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbroyd6v0000posbc7a74zt9","content":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><blockquote>\n<p>1、Express 是一个基于 Node.js 平台的极简、灵活的web应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>\n<p>2、丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 （ Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架）</p>\n<p>3、Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p>\n</blockquote>\n<p>&nbsp;</p>\n<a id=\"more\"></a>\n<h2 id=\"二、express环境搭建\"><a href=\"#二、express环境搭建\" class=\"headerlink\" title=\"二、express环境搭建\"></a>二、express环境搭建</h2><p>1、安装nodejs和npm，建议安装淘宝提供的国内镜像cnpm，这样安装比较快</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install –g cnpm</div></pre></td></tr></table></figure>\n<p>2、新建一个目录，在目录下执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cnpm install express --save</div></pre></td></tr></table></figure>\n<p>3、express环境已经搭建好了</p>\n<p>&nbsp;</p>\n<h2 id=\"三、基本路由\"><a href=\"#三、基本路由\" class=\"headerlink\" title=\"三、基本路由\"></a>三、基本路由</h2><p>1、简单版，除了get请求，还有post、put、delete</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'Hello World! &lt;a href=\"/news\"&gt;to news&lt;/a&gt;'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'this is news. &lt;a href=\"/\"&gt;back&lt;/a&gt;'</span>);</div><div class=\"line\">&#125;).post(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a post request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).put(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a put request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).delete(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a delete request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2、字符匹配模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _routeList = [<span class=\"string\">'&lt;ol&gt;'</span>];</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab?cd（匹配 acd 和 abcd）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab+cd（匹配 abcd、abbcd、abbbcd等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab*cd（匹配 abcd、abxcd、abRABDOMcd、ab123cd等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab(cd)?e（匹配 /abe 和 /abcde）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;/ol&gt;'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing：'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">    _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 acd 和 abcd</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab?cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab?cd');</span></div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab?cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abbcd、abbbcd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab+cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab+cd');</span></div><div class=\"line\">  </div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab+cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab*cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab*cd');</span></div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab*cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 /abe 和 /abcde</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab(cd)?e'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\"> <span class=\"comment\">// res.send('ab(cd)?e');</span></div><div class=\"line\"> _routeStr.push(<span class=\"string\">'ab(cd)?e'</span>);</div><div class=\"line\"> next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    _routeStr.push(<span class=\"string\">'end'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">'&lt;p&gt;'</span> + _routeStr.join(<span class=\"string\">'  ====&gt;  '</span>) + <span class=\"string\">'&lt;/p&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_routeList.join(<span class=\"string\">''</span>) + _html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3、正则匹配模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _routeList = [<span class=\"string\">'&lt;ol&gt;'</span>];</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;/a/（匹配任何路径中含有 a 的路径'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;/.*fly$/（匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;/ol&gt;'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing：'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">    _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配任何路径中含有 a 的路径：</span></div><div class=\"line\">app.get(<span class=\"regexp\">/a/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  _routeStr.push(<span class=\"string\">'/a/'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等</span></div><div class=\"line\">app.get(<span class=\"regexp\">/.*fly$/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  _routeStr.push(<span class=\"string\">'/.*fly$/'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    _routeStr.push(<span class=\"string\">'end'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">'&lt;p&gt;'</span> + _routeStr.join(<span class=\"string\">'  ====&gt;  '</span>) + <span class=\"string\">'&lt;/p&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_routeList.join(<span class=\"string\">''</span>) + _html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3、执行多个回调</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个回调函数，需指定执行next</span></div><div class=\"line\">app.get(<span class=\"string\">'/b'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is function b one'</span>);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is function b two'</span>);</div><div class=\"line\"></div><div class=\"line\">    res.send(<span class=\"string\">'Hello from B!'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个回调传入，需指定执行next，最后必须有send</span></div><div class=\"line\"><span class=\"keyword\">var</span> cb0 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB0'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB1'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello from C!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/c'</span>, [cb0, cb1, cb2]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"四、中间件router\"><a href=\"#四、中间件router\" class=\"headerlink\" title=\"四、中间件router\"></a>四、中间件router</h2><p>1、通过require导入各种路由配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _router1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r1.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r2.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router3 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r3.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router4 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r4.js'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, _router1);</div><div class=\"line\">app.use(<span class=\"string\">'/r2'</span>, _router2);</div><div class=\"line\">app.use(<span class=\"string\">'/r3'</span>, _router3);</div><div class=\"line\">app.use(<span class=\"string\">'/r4'</span>, _router4);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2、简单版</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义网站主页的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Birds home page'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义 about 页面的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'About birds'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>3、通过路由中间件控制</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息</span></div><div class=\"line\">router.use(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request URL:'</span>, req.originalUrl);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request Type:'</span>, req.method);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，处理指向 /user/:id 的 GET 请求</span></div><div class=\"line\">router.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(req.params, req.params.id == <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">// 如果 user id 为 0, 跳到下一个路由</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (req.params.id == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">      res.send(<span class=\"string\">'ID：'</span> + req.params.id);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 负责将控制权交给栈中下一个中间件</span></div><div class=\"line\">  <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      next();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 渲染常规页面</span></div><div class=\"line\">    res.send(<span class=\"string\">'next function ID：'</span> + req.params.id);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 填到下一个路由</span></div><div class=\"line\">    <span class=\"comment\">// next();</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>使用<code>router.param</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _pid;</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/blog/:pid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get function'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'pid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, pid</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'param function'</span>);</div><div class=\"line\">    <span class=\"comment\">// console.log(req.query);</span></div><div class=\"line\"></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        _pid = pid;</div><div class=\"line\"></div><div class=\"line\">        res.send(<span class=\"string\">'my pid is：'</span> + pid + <span class=\"string\">'&amp;&amp;'</span> + req.query.id);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\"></div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>多个参数的情况下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 无效，可能是版本问题</span></div><div class=\"line\"><span class=\"comment\">// router.param(['id', 'page'], function (req, res, next, value) &#123;</span></div><div class=\"line\"><span class=\"comment\">//   console.log('CALLED ONLY ONCE with', value);</span></div><div class=\"line\"><span class=\"comment\">//   next();</span></div><div class=\"line\"><span class=\"comment\">// &#125;)</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'nid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'nid：'</span>, value);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'page：'</span>, value);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/news/:nid/:page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'although this matches'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/news/:nid/:page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'and this matches too'</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'ok'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"五、静态资源目录\"><a href=\"#五、静态资源目录\" class=\"headerlink\" title=\"五、静态资源目录\"></a>五、静态资源目录</h2><p>也算是属于路由中的一部分，负责静态资源的路径设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\">app.use(<span class=\"string\">'/pic'</span>, express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\">app.use(<span class=\"string\">'/img'</span>, express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/img'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/icon.png&lt;/p&gt;&lt;img src=\"/icon.png\" /&gt;'</span>;</div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/pic/icon.png&lt;/p&gt;&lt;img src=\"/pic/icon.png\" /&gt;'</span>;</div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/img/icon.png&lt;/p&gt;&lt;img src=\"/img/icon.png\" /&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"六、实例源码\"><a href=\"#六、实例源码\" class=\"headerlink\" title=\"六、实例源码\"></a>六、实例源码</h2><p><a href=\"https://github.com/ingdanfed/express_demo\" target=\"_blank\" rel=\"external\">github express_demo</a></p>\n","excerpt":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><blockquote>\n<p>1、Express 是一个基于 Node.js 平台的极简、灵活的web应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>\n<p>2、丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 （ Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架）</p>\n<p>3、Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p>\n</blockquote>\n<p>&nbsp;</p>","more":"<h2 id=\"二、express环境搭建\"><a href=\"#二、express环境搭建\" class=\"headerlink\" title=\"二、express环境搭建\"></a>二、express环境搭建</h2><p>1、安装nodejs和npm，建议安装淘宝提供的国内镜像cnpm，这样安装比较快</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install –g cnpm</div></pre></td></tr></table></figure>\n<p>2、新建一个目录，在目录下执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cnpm install express --save</div></pre></td></tr></table></figure>\n<p>3、express环境已经搭建好了</p>\n<p>&nbsp;</p>\n<h2 id=\"三、基本路由\"><a href=\"#三、基本路由\" class=\"headerlink\" title=\"三、基本路由\"></a>三、基本路由</h2><p>1、简单版，除了get请求，还有post、put、delete</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'Hello World! &lt;a href=\"/news\"&gt;to news&lt;/a&gt;'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'this is news. &lt;a href=\"/\"&gt;back&lt;/a&gt;'</span>);</div><div class=\"line\">&#125;).post(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a post request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).put(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a put request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).delete(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a delete request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2、字符匹配模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _routeList = [<span class=\"string\">'&lt;ol&gt;'</span>];</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab?cd（匹配 acd 和 abcd）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab+cd（匹配 abcd、abbcd、abbbcd等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab*cd（匹配 abcd、abxcd、abRABDOMcd、ab123cd等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab(cd)?e（匹配 /abe 和 /abcde）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;/ol&gt;'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing：'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">    _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 acd 和 abcd</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab?cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab?cd');</span></div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab?cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abbcd、abbbcd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab+cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab+cd');</span></div><div class=\"line\">  </div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab+cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab*cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab*cd');</span></div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab*cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 /abe 和 /abcde</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab(cd)?e'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\"> <span class=\"comment\">// res.send('ab(cd)?e');</span></div><div class=\"line\"> _routeStr.push(<span class=\"string\">'ab(cd)?e'</span>);</div><div class=\"line\"> next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    _routeStr.push(<span class=\"string\">'end'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">'&lt;p&gt;'</span> + _routeStr.join(<span class=\"string\">'  ====&gt;  '</span>) + <span class=\"string\">'&lt;/p&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_routeList.join(<span class=\"string\">''</span>) + _html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3、正则匹配模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _routeList = [<span class=\"string\">'&lt;ol&gt;'</span>];</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;/a/（匹配任何路径中含有 a 的路径'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;/.*fly$/（匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;/ol&gt;'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing：'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">    _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配任何路径中含有 a 的路径：</span></div><div class=\"line\">app.get(<span class=\"regexp\">/a/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  _routeStr.push(<span class=\"string\">'/a/'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等</span></div><div class=\"line\">app.get(<span class=\"regexp\">/.*fly$/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  _routeStr.push(<span class=\"string\">'/.*fly$/'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    _routeStr.push(<span class=\"string\">'end'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">'&lt;p&gt;'</span> + _routeStr.join(<span class=\"string\">'  ====&gt;  '</span>) + <span class=\"string\">'&lt;/p&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_routeList.join(<span class=\"string\">''</span>) + _html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3、执行多个回调</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个回调函数，需指定执行next</span></div><div class=\"line\">app.get(<span class=\"string\">'/b'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is function b one'</span>);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is function b two'</span>);</div><div class=\"line\"></div><div class=\"line\">    res.send(<span class=\"string\">'Hello from B!'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个回调传入，需指定执行next，最后必须有send</span></div><div class=\"line\"><span class=\"keyword\">var</span> cb0 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB0'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB1'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello from C!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/c'</span>, [cb0, cb1, cb2]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"四、中间件router\"><a href=\"#四、中间件router\" class=\"headerlink\" title=\"四、中间件router\"></a>四、中间件router</h2><p>1、通过require导入各种路由配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _router1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r1.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r2.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router3 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r3.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router4 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r4.js'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, _router1);</div><div class=\"line\">app.use(<span class=\"string\">'/r2'</span>, _router2);</div><div class=\"line\">app.use(<span class=\"string\">'/r3'</span>, _router3);</div><div class=\"line\">app.use(<span class=\"string\">'/r4'</span>, _router4);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2、简单版</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义网站主页的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Birds home page'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义 about 页面的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'About birds'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>3、通过路由中间件控制</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息</span></div><div class=\"line\">router.use(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request URL:'</span>, req.originalUrl);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request Type:'</span>, req.method);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，处理指向 /user/:id 的 GET 请求</span></div><div class=\"line\">router.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(req.params, req.params.id == <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">// 如果 user id 为 0, 跳到下一个路由</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (req.params.id == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">      res.send(<span class=\"string\">'ID：'</span> + req.params.id);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 负责将控制权交给栈中下一个中间件</span></div><div class=\"line\">  <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      next();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 渲染常规页面</span></div><div class=\"line\">    res.send(<span class=\"string\">'next function ID：'</span> + req.params.id);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 填到下一个路由</span></div><div class=\"line\">    <span class=\"comment\">// next();</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>使用<code>router.param</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _pid;</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/blog/:pid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get function'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'pid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, pid</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'param function'</span>);</div><div class=\"line\">    <span class=\"comment\">// console.log(req.query);</span></div><div class=\"line\"></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        _pid = pid;</div><div class=\"line\"></div><div class=\"line\">        res.send(<span class=\"string\">'my pid is：'</span> + pid + <span class=\"string\">'&amp;&amp;'</span> + req.query.id);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\"></div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>多个参数的情况下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 无效，可能是版本问题</span></div><div class=\"line\"><span class=\"comment\">// router.param(['id', 'page'], function (req, res, next, value) &#123;</span></div><div class=\"line\"><span class=\"comment\">//   console.log('CALLED ONLY ONCE with', value);</span></div><div class=\"line\"><span class=\"comment\">//   next();</span></div><div class=\"line\"><span class=\"comment\">// &#125;)</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'nid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'nid：'</span>, value);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'page：'</span>, value);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/news/:nid/:page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'although this matches'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/news/:nid/:page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'and this matches too'</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'ok'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"五、静态资源目录\"><a href=\"#五、静态资源目录\" class=\"headerlink\" title=\"五、静态资源目录\"></a>五、静态资源目录</h2><p>也算是属于路由中的一部分，负责静态资源的路径设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\">app.use(<span class=\"string\">'/pic'</span>, express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\">app.use(<span class=\"string\">'/img'</span>, express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/img'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/icon.png&lt;/p&gt;&lt;img src=\"/icon.png\" /&gt;'</span>;</div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/pic/icon.png&lt;/p&gt;&lt;img src=\"/pic/icon.png\" /&gt;'</span>;</div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/img/icon.png&lt;/p&gt;&lt;img src=\"/img/icon.png\" /&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"六、实例源码\"><a href=\"#六、实例源码\" class=\"headerlink\" title=\"六、实例源码\"></a>六、实例源码</h2><p><a href=\"https://github.com/ingdanfed/express_demo\">github express_demo</a></p>"},{"title":"使用hexo遇到的一个坑","date":"2017-03-23T03:46:16.000Z","_content":"\nhexo中首页列表的摘要（excerpt）弄不出来，一直显示全文\n\n修改了N多配置都不生效，官方文档中也没有说明，唯有各种搜索答案，终于找到了！\n\n<!-- more -->\n\n原来只需要在文中加入`<!-- more -->`就可以了，这实在是个大坑！\n\n```javascript\n这就是一个简介\n\n<!-- more -->\n \n这里更多的内容\n```\n\n\n[原答案链接](http://www.cnblogs.com/pcy0/p/how-to-show-less-in-home-page-of-hexo.html, Clarence Pan的博客)","source":"_posts/2017-03-23-使用hexo遇到的一个坑.md","raw":"---\ntitle: 使用hexo遇到的一个坑\ndate: 2017-03-23 11:46:16\ntags: hexo\ncategories: 填坑\n---\n\nhexo中首页列表的摘要（excerpt）弄不出来，一直显示全文\n\n修改了N多配置都不生效，官方文档中也没有说明，唯有各种搜索答案，终于找到了！\n\n<!-- more -->\n\n原来只需要在文中加入`<!-- more -->`就可以了，这实在是个大坑！\n\n```javascript\n这就是一个简介\n\n<!-- more -->\n \n这里更多的内容\n```\n\n\n[原答案链接](http://www.cnblogs.com/pcy0/p/how-to-show-less-in-home-page-of-hexo.html, Clarence Pan的博客)","slug":"使用hexo遇到的一个坑","published":1,"updated":"2017-03-23T04:15:03.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbroyd710001posbruoj0ce1","content":"<p>hexo中首页列表的摘要（excerpt）弄不出来，一直显示全文</p>\n<p>修改了N多配置都不生效，官方文档中也没有说明，唯有各种搜索答案，终于找到了！</p>\n<a id=\"more\"></a>\n<p>原来只需要在文中加入<code>&lt;!-- more --&gt;</code>就可以了，这实在是个大坑！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">这就是一个简介</div><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"> </div><div class=\"line\">这里更多的内容</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/pcy0/p/how-to-show-less-in-home-page-of-hexo.html, Clarence Pan的博客\" target=\"_blank\" rel=\"external\">原答案链接</a></p>\n","excerpt":"<p>hexo中首页列表的摘要（excerpt）弄不出来，一直显示全文</p>\n<p>修改了N多配置都不生效，官方文档中也没有说明，唯有各种搜索答案，终于找到了！</p>","more":"<p>原来只需要在文中加入<code>&lt;!-- more --&gt;</code>就可以了，这实在是个大坑！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">这就是一个简介</div><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"> </div><div class=\"line\">这里更多的内容</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/pcy0/p/how-to-show-less-in-home-page-of-hexo.html, Clarence Pan的博客\">原答案链接</a></p>"},{"title":"h5唤醒App","date":"2017-04-13T05:37:37.000Z","_content":"\n首先要声明的一点是，h5页面无法获取app的状态，也就是说，无法判断app是否已下载，app是否已打开。\n那么基于这个，怎么样实现在h5页面唤醒指定的app呢？\n请看下回分解~\n\n<!-- more -->\n\n一般来讲，app产品都会有一个下载落地页，引导用户前往应用市场下载app应用，安卓的前往安卓市场，ios的跑到appstore。\n那么先不考虑页面的样式，首先进入到页面，第一步是获取设备信息，也就是浏览器信息。\n\n## 1、获取设备信息\n\n```javascript\nfunction getPlatform(){\n  var u = navigator.userAgent,\n    app = navigator.appVersion,\n    iosVer = app.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n  return {\n    // android终端或者uc浏览器\n    android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1,\n    // 是否为iPhone或者QQHD浏览器\n    iPhone: u.indexOf('iPhone') > -1,\n    // 是否iPad\n    iPad: u.indexOf('iPad') > -1,\n    // ios 版本号\n    iosVer: iosVer && parseInt(iosVer[1], 10),\n    // 微信\n    weChat: u.indexOf('MicroMessenger') > -1,\n    // QQ\n    QQ: u.indexOf('QQ') > -1,\n    // 微博\n    WeiBo: u.indexOf('weibo') > -1\n  };\n}\n```\n\n## 2、设置app下载地址\n\n安卓应用市场及appstore下载地址各不相同，所以要跟app的童鞋拿到应用下载地址\n```javascript\n// 下载链接\nvar _androidUrl = 'http://a.app.qq.com/o/simple.jsp?pkgname=com.ingdan.ingdannews';\nvar _iosUrl = 'https://itunes.apple.com/us/app/in-tou-tiao-zhuan-zhu-zhi/id1197794545?l=zh&ls=1&mt=8';\n```\n\n## 3、跳转app下载页面\n\n那么页面打开后，就应该判断设备，然后进行页面跳转了\n```javascript\nvar _platform = getPlatform();\nvar _downloadUrl = _androidUrl;\n\nif(_platform.android){\n  // 安卓\n}else{\n  // ios\n  _downloadUrl = _iosUrl;\n}\n\nwindow.location.href = _downloadUrl;\n\n```\n\n是不是很完美了，当然不是，app还没打开呢，而且在各个不同环境有不同限制，例如在微信或微博中打开，是不允许直接跳转到appstore，那怎么解决？\n```javascript\nif(_platform.android){\n  // 安卓\n}else{\n  // ios\n  if(_platform.weChat || _platform.WeiBo){\n    alert('请再浏览器中打开本页面~速去');\n  }\n}\n```\n\n看起来十分完美，然而还是没有，app也还没打开呢\n\n## 4、打开APP\n\n如何打开app呢，这里需要注意的一点事，打开app必须要开发的童靴提供一个自定义协议，例如：\n\n```javascript\nvar _appUrl = 'INNewsApp://';\n```\n\n其中`INNewsApp://`是app开发自行决定的协议，当然最好后边能跟上app相对应的域名，如：`INNewsApp://m.ingdan.com`\n如果需要打开app后跳转到指定页面，那么就应该在链接中加入参数，如：`INNewsApp://m.ingdan.com?id=9527`\n\n打来app地址有了，接下来如何处理？\n我们这里使用iframe来打开，避免了一旦url有误，或者手机上没有安装app导致报错。\n\n```javascript\n// 在iframe 中打开APP\nvar ifr = document.createElement('iframe');\n\nifr.style.display = 'none';\nifr.src = _appUrl;\n\ndocument.body.appendChild(ifr);\n```\n到了这时，在测试ios的时候发现一个问题，ios9以上，不支持iframe打开app\n于是乎\n```javascript\n// 判断ios版本，ios9以上直接打开\nif(_platform.iosVer >= 9){\n  window.location.href = _appUrl;\n}else{\n  // 在iframe 中打开APP\n  // ...\n}\n```\n如果手机上安装有app，这是h5就可以唤醒app，app就启动了。\n\n## 5、一些兼容处理\n\n产品这时希望，那么如果手机上没有安装app，怎跳转到app下载页面，怎么办？\n先把产品打一顿再说\n\n```javascript\nsetTimeout(function() {\n  // 2秒之后，移除iframe\n  document.body.removeChild(ifr);\n\n  // 跳转到app下载地址\n  window.location.href = _downloadUrl;\n}, 2000);\n```\n这样似乎已经完美了，然后还没有。\n一般情况下，浏览器处于非激活状态、使用alert弹出信息或者系统信息提示，页面是会中断js运行的\n然后在QQ安卓版的内置浏览器上，并没有，更为让人开心的是，如果你的app是跳转到应用宝上，应用宝会自动判断你是否一下子该app，并且还很友好的帮你打开\n这个时候你就会发现，在QQ内置浏览器打开下载引导页面，app打开了，正看得高兴，过了2秒，app又打开一次...\n\n于是乎\n```javascript\n// 非QQ内置浏览器\nif(!_platform.QQ){\n  window.location.href = _downloadUrl;\n}\n```\n那在QQ安卓版的内置浏览器上，如果有app，则自动打开，如果没有，怎么引导用户下载？\n页面上那么大一颗下载按钮，自己点吧。\n\n","source":"_posts/2017-04-13-h5唤醒App.md","raw":"---\ntitle: h5唤醒App\ndate: 2017-04-13 13:37:37\ntags:\ncategories:\n---\n\n首先要声明的一点是，h5页面无法获取app的状态，也就是说，无法判断app是否已下载，app是否已打开。\n那么基于这个，怎么样实现在h5页面唤醒指定的app呢？\n请看下回分解~\n\n<!-- more -->\n\n一般来讲，app产品都会有一个下载落地页，引导用户前往应用市场下载app应用，安卓的前往安卓市场，ios的跑到appstore。\n那么先不考虑页面的样式，首先进入到页面，第一步是获取设备信息，也就是浏览器信息。\n\n## 1、获取设备信息\n\n```javascript\nfunction getPlatform(){\n  var u = navigator.userAgent,\n    app = navigator.appVersion,\n    iosVer = app.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n  return {\n    // android终端或者uc浏览器\n    android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1,\n    // 是否为iPhone或者QQHD浏览器\n    iPhone: u.indexOf('iPhone') > -1,\n    // 是否iPad\n    iPad: u.indexOf('iPad') > -1,\n    // ios 版本号\n    iosVer: iosVer && parseInt(iosVer[1], 10),\n    // 微信\n    weChat: u.indexOf('MicroMessenger') > -1,\n    // QQ\n    QQ: u.indexOf('QQ') > -1,\n    // 微博\n    WeiBo: u.indexOf('weibo') > -1\n  };\n}\n```\n\n## 2、设置app下载地址\n\n安卓应用市场及appstore下载地址各不相同，所以要跟app的童鞋拿到应用下载地址\n```javascript\n// 下载链接\nvar _androidUrl = 'http://a.app.qq.com/o/simple.jsp?pkgname=com.ingdan.ingdannews';\nvar _iosUrl = 'https://itunes.apple.com/us/app/in-tou-tiao-zhuan-zhu-zhi/id1197794545?l=zh&ls=1&mt=8';\n```\n\n## 3、跳转app下载页面\n\n那么页面打开后，就应该判断设备，然后进行页面跳转了\n```javascript\nvar _platform = getPlatform();\nvar _downloadUrl = _androidUrl;\n\nif(_platform.android){\n  // 安卓\n}else{\n  // ios\n  _downloadUrl = _iosUrl;\n}\n\nwindow.location.href = _downloadUrl;\n\n```\n\n是不是很完美了，当然不是，app还没打开呢，而且在各个不同环境有不同限制，例如在微信或微博中打开，是不允许直接跳转到appstore，那怎么解决？\n```javascript\nif(_platform.android){\n  // 安卓\n}else{\n  // ios\n  if(_platform.weChat || _platform.WeiBo){\n    alert('请再浏览器中打开本页面~速去');\n  }\n}\n```\n\n看起来十分完美，然而还是没有，app也还没打开呢\n\n## 4、打开APP\n\n如何打开app呢，这里需要注意的一点事，打开app必须要开发的童靴提供一个自定义协议，例如：\n\n```javascript\nvar _appUrl = 'INNewsApp://';\n```\n\n其中`INNewsApp://`是app开发自行决定的协议，当然最好后边能跟上app相对应的域名，如：`INNewsApp://m.ingdan.com`\n如果需要打开app后跳转到指定页面，那么就应该在链接中加入参数，如：`INNewsApp://m.ingdan.com?id=9527`\n\n打来app地址有了，接下来如何处理？\n我们这里使用iframe来打开，避免了一旦url有误，或者手机上没有安装app导致报错。\n\n```javascript\n// 在iframe 中打开APP\nvar ifr = document.createElement('iframe');\n\nifr.style.display = 'none';\nifr.src = _appUrl;\n\ndocument.body.appendChild(ifr);\n```\n到了这时，在测试ios的时候发现一个问题，ios9以上，不支持iframe打开app\n于是乎\n```javascript\n// 判断ios版本，ios9以上直接打开\nif(_platform.iosVer >= 9){\n  window.location.href = _appUrl;\n}else{\n  // 在iframe 中打开APP\n  // ...\n}\n```\n如果手机上安装有app，这是h5就可以唤醒app，app就启动了。\n\n## 5、一些兼容处理\n\n产品这时希望，那么如果手机上没有安装app，怎跳转到app下载页面，怎么办？\n先把产品打一顿再说\n\n```javascript\nsetTimeout(function() {\n  // 2秒之后，移除iframe\n  document.body.removeChild(ifr);\n\n  // 跳转到app下载地址\n  window.location.href = _downloadUrl;\n}, 2000);\n```\n这样似乎已经完美了，然后还没有。\n一般情况下，浏览器处于非激活状态、使用alert弹出信息或者系统信息提示，页面是会中断js运行的\n然后在QQ安卓版的内置浏览器上，并没有，更为让人开心的是，如果你的app是跳转到应用宝上，应用宝会自动判断你是否一下子该app，并且还很友好的帮你打开\n这个时候你就会发现，在QQ内置浏览器打开下载引导页面，app打开了，正看得高兴，过了2秒，app又打开一次...\n\n于是乎\n```javascript\n// 非QQ内置浏览器\nif(!_platform.QQ){\n  window.location.href = _downloadUrl;\n}\n```\n那在QQ安卓版的内置浏览器上，如果有app，则自动打开，如果没有，怎么引导用户下载？\n页面上那么大一颗下载按钮，自己点吧。\n\n","slug":"h5唤醒App","published":1,"updated":"2017-04-26T04:45:47.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbroyd7a0004posb1ua6t924","content":"<p>首先要声明的一点是，h5页面无法获取app的状态，也就是说，无法判断app是否已下载，app是否已打开。<br>那么基于这个，怎么样实现在h5页面唤醒指定的app呢？<br>请看下回分解~</p>\n<a id=\"more\"></a>\n<p>一般来讲，app产品都会有一个下载落地页，引导用户前往应用市场下载app应用，安卓的前往安卓市场，ios的跑到appstore。<br>那么先不考虑页面的样式，首先进入到页面，第一步是获取设备信息，也就是浏览器信息。</p>\n<h2 id=\"1、获取设备信息\"><a href=\"#1、获取设备信息\" class=\"headerlink\" title=\"1、获取设备信息\"></a>1、获取设备信息</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPlatform</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> u = navigator.userAgent,</div><div class=\"line\">    app = navigator.appVersion,</div><div class=\"line\">    iosVer = app.match(<span class=\"regexp\">/OS (\\d+)_(\\d+)_?(\\d+)?/</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// android终端或者uc浏览器</span></div><div class=\"line\">    android: u.indexOf(<span class=\"string\">'Android'</span>) &gt; <span class=\"number\">-1</span> || u.indexOf(<span class=\"string\">'Linux'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// 是否为iPhone或者QQHD浏览器</span></div><div class=\"line\">    iPhone: u.indexOf(<span class=\"string\">'iPhone'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// 是否iPad</span></div><div class=\"line\">    iPad: u.indexOf(<span class=\"string\">'iPad'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// ios 版本号</span></div><div class=\"line\">    iosVer: iosVer &amp;&amp; <span class=\"built_in\">parseInt</span>(iosVer[<span class=\"number\">1</span>], <span class=\"number\">10</span>),</div><div class=\"line\">    <span class=\"comment\">// 微信</span></div><div class=\"line\">    weChat: u.indexOf(<span class=\"string\">'MicroMessenger'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// QQ</span></div><div class=\"line\">    QQ: u.indexOf(<span class=\"string\">'QQ'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// 微博</span></div><div class=\"line\">    WeiBo: u.indexOf(<span class=\"string\">'weibo'</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2、设置app下载地址\"><a href=\"#2、设置app下载地址\" class=\"headerlink\" title=\"2、设置app下载地址\"></a>2、设置app下载地址</h2><p>安卓应用市场及appstore下载地址各不相同，所以要跟app的童鞋拿到应用下载地址<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 下载链接</span></div><div class=\"line\"><span class=\"keyword\">var</span> _androidUrl = <span class=\"string\">'http://a.app.qq.com/o/simple.jsp?pkgname=com.ingdan.ingdannews'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> _iosUrl = <span class=\"string\">'https://itunes.apple.com/us/app/in-tou-tiao-zhuan-zhu-zhi/id1197794545?l=zh&amp;ls=1&amp;mt=8'</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3、跳转app下载页面\"><a href=\"#3、跳转app下载页面\" class=\"headerlink\" title=\"3、跳转app下载页面\"></a>3、跳转app下载页面</h2><p>那么页面打开后，就应该判断设备，然后进行页面跳转了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _platform = getPlatform();</div><div class=\"line\"><span class=\"keyword\">var</span> _downloadUrl = _androidUrl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(_platform.android)&#123;</div><div class=\"line\">  <span class=\"comment\">// 安卓</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ios</span></div><div class=\"line\">  _downloadUrl = _iosUrl;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">window</span>.location.href = _downloadUrl;</div></pre></td></tr></table></figure></p>\n<p>是不是很完美了，当然不是，app还没打开呢，而且在各个不同环境有不同限制，例如在微信或微博中打开，是不允许直接跳转到appstore，那怎么解决？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(_platform.android)&#123;</div><div class=\"line\">  <span class=\"comment\">// 安卓</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ios</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(_platform.weChat || _platform.WeiBo)&#123;</div><div class=\"line\">    alert(<span class=\"string\">'请再浏览器中打开本页面~速去'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看起来十分完美，然而还是没有，app也还没打开呢</p>\n<h2 id=\"4、打开APP\"><a href=\"#4、打开APP\" class=\"headerlink\" title=\"4、打开APP\"></a>4、打开APP</h2><p>如何打开app呢，这里需要注意的一点事，打开app必须要开发的童靴提供一个自定义协议，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _appUrl = <span class=\"string\">'INNewsApp://'</span>;</div></pre></td></tr></table></figure>\n<p>其中<code>INNewsApp://</code>是app开发自行决定的协议，当然最好后边能跟上app相对应的域名，如：<code>INNewsApp://m.ingdan.com</code><br>如果需要打开app后跳转到指定页面，那么就应该在链接中加入参数，如：<code>INNewsApp://m.ingdan.com?id=9527</code></p>\n<p>打来app地址有了，接下来如何处理？<br>我们这里使用iframe来打开，避免了一旦url有误，或者手机上没有安装app导致报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在iframe 中打开APP</span></div><div class=\"line\"><span class=\"keyword\">var</span> ifr = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>);</div><div class=\"line\"></div><div class=\"line\">ifr.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">ifr.src = _appUrl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(ifr);</div></pre></td></tr></table></figure>\n<p>到了这时，在测试ios的时候发现一个问题，ios9以上，不支持iframe打开app<br>于是乎<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 判断ios版本，ios9以上直接打开</span></div><div class=\"line\"><span class=\"keyword\">if</span>(_platform.iosVer &gt;= <span class=\"number\">9</span>)&#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.location.href = _appUrl;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 在iframe 中打开APP</span></div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果手机上安装有app，这是h5就可以唤醒app，app就启动了。</p>\n<h2 id=\"5、一些兼容处理\"><a href=\"#5、一些兼容处理\" class=\"headerlink\" title=\"5、一些兼容处理\"></a>5、一些兼容处理</h2><p>产品这时希望，那么如果手机上没有安装app，怎跳转到app下载页面，怎么办？<br>先把产品打一顿再说</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 2秒之后，移除iframe</span></div><div class=\"line\">  <span class=\"built_in\">document</span>.body.removeChild(ifr);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 跳转到app下载地址</span></div><div class=\"line\">  <span class=\"built_in\">window</span>.location.href = _downloadUrl;</div><div class=\"line\">&#125;, <span class=\"number\">2000</span>);</div></pre></td></tr></table></figure>\n<p>这样似乎已经完美了，然后还没有。<br>一般情况下，浏览器处于非激活状态、使用alert弹出信息或者系统信息提示，页面是会中断js运行的<br>然后在QQ安卓版的内置浏览器上，并没有，更为让人开心的是，如果你的app是跳转到应用宝上，应用宝会自动判断你是否一下子该app，并且还很友好的帮你打开<br>这个时候你就会发现，在QQ内置浏览器打开下载引导页面，app打开了，正看得高兴，过了2秒，app又打开一次…</p>\n<p>于是乎<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非QQ内置浏览器</span></div><div class=\"line\"><span class=\"keyword\">if</span>(!_platform.QQ)&#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.location.href = _downloadUrl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那在QQ安卓版的内置浏览器上，如果有app，则自动打开，如果没有，怎么引导用户下载？<br>页面上那么大一颗下载按钮，自己点吧。</p>\n","excerpt":"<p>首先要声明的一点是，h5页面无法获取app的状态，也就是说，无法判断app是否已下载，app是否已打开。<br>那么基于这个，怎么样实现在h5页面唤醒指定的app呢？<br>请看下回分解~</p>","more":"<p>一般来讲，app产品都会有一个下载落地页，引导用户前往应用市场下载app应用，安卓的前往安卓市场，ios的跑到appstore。<br>那么先不考虑页面的样式，首先进入到页面，第一步是获取设备信息，也就是浏览器信息。</p>\n<h2 id=\"1、获取设备信息\"><a href=\"#1、获取设备信息\" class=\"headerlink\" title=\"1、获取设备信息\"></a>1、获取设备信息</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPlatform</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> u = navigator.userAgent,</div><div class=\"line\">    app = navigator.appVersion,</div><div class=\"line\">    iosVer = app.match(<span class=\"regexp\">/OS (\\d+)_(\\d+)_?(\\d+)?/</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// android终端或者uc浏览器</span></div><div class=\"line\">    android: u.indexOf(<span class=\"string\">'Android'</span>) &gt; <span class=\"number\">-1</span> || u.indexOf(<span class=\"string\">'Linux'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// 是否为iPhone或者QQHD浏览器</span></div><div class=\"line\">    iPhone: u.indexOf(<span class=\"string\">'iPhone'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// 是否iPad</span></div><div class=\"line\">    iPad: u.indexOf(<span class=\"string\">'iPad'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// ios 版本号</span></div><div class=\"line\">    iosVer: iosVer &amp;&amp; <span class=\"built_in\">parseInt</span>(iosVer[<span class=\"number\">1</span>], <span class=\"number\">10</span>),</div><div class=\"line\">    <span class=\"comment\">// 微信</span></div><div class=\"line\">    weChat: u.indexOf(<span class=\"string\">'MicroMessenger'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// QQ</span></div><div class=\"line\">    QQ: u.indexOf(<span class=\"string\">'QQ'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// 微博</span></div><div class=\"line\">    WeiBo: u.indexOf(<span class=\"string\">'weibo'</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2、设置app下载地址\"><a href=\"#2、设置app下载地址\" class=\"headerlink\" title=\"2、设置app下载地址\"></a>2、设置app下载地址</h2><p>安卓应用市场及appstore下载地址各不相同，所以要跟app的童鞋拿到应用下载地址<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 下载链接</span></div><div class=\"line\"><span class=\"keyword\">var</span> _androidUrl = <span class=\"string\">'http://a.app.qq.com/o/simple.jsp?pkgname=com.ingdan.ingdannews'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> _iosUrl = <span class=\"string\">'https://itunes.apple.com/us/app/in-tou-tiao-zhuan-zhu-zhi/id1197794545?l=zh&amp;ls=1&amp;mt=8'</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3、跳转app下载页面\"><a href=\"#3、跳转app下载页面\" class=\"headerlink\" title=\"3、跳转app下载页面\"></a>3、跳转app下载页面</h2><p>那么页面打开后，就应该判断设备，然后进行页面跳转了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _platform = getPlatform();</div><div class=\"line\"><span class=\"keyword\">var</span> _downloadUrl = _androidUrl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(_platform.android)&#123;</div><div class=\"line\">  <span class=\"comment\">// 安卓</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ios</span></div><div class=\"line\">  _downloadUrl = _iosUrl;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">window</span>.location.href = _downloadUrl;</div></pre></td></tr></table></figure></p>\n<p>是不是很完美了，当然不是，app还没打开呢，而且在各个不同环境有不同限制，例如在微信或微博中打开，是不允许直接跳转到appstore，那怎么解决？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(_platform.android)&#123;</div><div class=\"line\">  <span class=\"comment\">// 安卓</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ios</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(_platform.weChat || _platform.WeiBo)&#123;</div><div class=\"line\">    alert(<span class=\"string\">'请再浏览器中打开本页面~速去'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看起来十分完美，然而还是没有，app也还没打开呢</p>\n<h2 id=\"4、打开APP\"><a href=\"#4、打开APP\" class=\"headerlink\" title=\"4、打开APP\"></a>4、打开APP</h2><p>如何打开app呢，这里需要注意的一点事，打开app必须要开发的童靴提供一个自定义协议，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _appUrl = <span class=\"string\">'INNewsApp://'</span>;</div></pre></td></tr></table></figure>\n<p>其中<code>INNewsApp://</code>是app开发自行决定的协议，当然最好后边能跟上app相对应的域名，如：<code>INNewsApp://m.ingdan.com</code><br>如果需要打开app后跳转到指定页面，那么就应该在链接中加入参数，如：<code>INNewsApp://m.ingdan.com?id=9527</code></p>\n<p>打来app地址有了，接下来如何处理？<br>我们这里使用iframe来打开，避免了一旦url有误，或者手机上没有安装app导致报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在iframe 中打开APP</span></div><div class=\"line\"><span class=\"keyword\">var</span> ifr = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>);</div><div class=\"line\"></div><div class=\"line\">ifr.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">ifr.src = _appUrl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(ifr);</div></pre></td></tr></table></figure>\n<p>到了这时，在测试ios的时候发现一个问题，ios9以上，不支持iframe打开app<br>于是乎<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 判断ios版本，ios9以上直接打开</span></div><div class=\"line\"><span class=\"keyword\">if</span>(_platform.iosVer &gt;= <span class=\"number\">9</span>)&#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.location.href = _appUrl;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 在iframe 中打开APP</span></div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果手机上安装有app，这是h5就可以唤醒app，app就启动了。</p>\n<h2 id=\"5、一些兼容处理\"><a href=\"#5、一些兼容处理\" class=\"headerlink\" title=\"5、一些兼容处理\"></a>5、一些兼容处理</h2><p>产品这时希望，那么如果手机上没有安装app，怎跳转到app下载页面，怎么办？<br>先把产品打一顿再说</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 2秒之后，移除iframe</span></div><div class=\"line\">  <span class=\"built_in\">document</span>.body.removeChild(ifr);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 跳转到app下载地址</span></div><div class=\"line\">  <span class=\"built_in\">window</span>.location.href = _downloadUrl;</div><div class=\"line\">&#125;, <span class=\"number\">2000</span>);</div></pre></td></tr></table></figure>\n<p>这样似乎已经完美了，然后还没有。<br>一般情况下，浏览器处于非激活状态、使用alert弹出信息或者系统信息提示，页面是会中断js运行的<br>然后在QQ安卓版的内置浏览器上，并没有，更为让人开心的是，如果你的app是跳转到应用宝上，应用宝会自动判断你是否一下子该app，并且还很友好的帮你打开<br>这个时候你就会发现，在QQ内置浏览器打开下载引导页面，app打开了，正看得高兴，过了2秒，app又打开一次…</p>\n<p>于是乎<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非QQ内置浏览器</span></div><div class=\"line\"><span class=\"keyword\">if</span>(!_platform.QQ)&#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.location.href = _downloadUrl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那在QQ安卓版的内置浏览器上，如果有app，则自动打开，如果没有，怎么引导用户下载？<br>页面上那么大一颗下载按钮，自己点吧。</p>"},{"title":"vuejs基础入门","date":"2017-04-26T02:34:00.000Z","_content":"\n为什么要学习vuejs？因为这两年vuejs蛮火的，而且易入门，实用。\nvuejs 是一套构建用户界面的 渐进式框架。\nvuejs 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。\nvuejs 现在不支持IE8及以下，以后也不会支持。\n\n<!-- more -->\n## 一、基本语法\n\n### 1、插值\n\n#### 1.1 文本\n双大括号包裹住变量名\n```html\n<div id=\"app\">{{ message }}</div>\n```\n\n#### 1.2 纯HTML\n使用`v-html`指令输出html\n```html\n<div v-html=\"message\"></div>\n```\n\n#### 1.3 属性\n使用`v-bind`指令绑定dom元素属性\n```html\n<div v-bind:id=\"message\" v-bind:data-abc=\"message\"></div>\n```\n\n#### 1.4 JavaScript 表达式\n使用双大括号包裹住表达式\n```html\n<p>{{ number + 1 }}</p>\n<p>{{ ok ? 'YES' : 'NO' }}</p>\n<p>{{ message.split('').reverse().join('') }}</p>\n<p v-bind:id=\"'list-' + id\"></p>\n```\n\n这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n类似于一个`function`，执行一系列语句后，必须 return 一个结果。\n\n```html\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n不应该在模板表达式中试图访问用户定义的全局变量\n\n### 2、指令\n\n指令（Directives）是带有 v- 前缀的特殊属性\n\n#### 2.1 参数\n如下：`url`和`doSomething`就是传入vue实例的参数，`url`是一个变量，`doSomething`是一个方法名\n```html\n<a v-bind:href=\"url\"></a>\n<a v-on:click=\"doSomething\">\n```\n\n#### 2.2 修饰符\n修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定\n`.prevent`修饰符告诉`v-on`指令对于触发的事件调用`event.preventDefault()`来阻止默认行为\n```html\n<form v-on:submit.prevent=\"onSubmit\"></form>\n```\n事件修饰符有：`.stop``.prevent``.capture``.self``.once`\n更多修饰符自己查..\n\n### 3、过滤器\n\nvuejs 允许你自定义过滤器，可被用作一些常见的文本格式化。\n过滤器可以用在两个地方：插值和`v-bind`表达式。\n过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示\n\n```html\n<!-- in 插值 -->\n{{ message | capitalize }}\n<!-- in v-bind -->\n<div v-bind:id=\"rawId | formatId\"></div>\n```\n\n```javascript\nnew Vue({\n  // ...\n  filters: {\n    // 自定义过滤器\n    // 过滤器函数总接受表达式的值作为第一个参数\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n})\n```\n\n过滤器可以串联\n```html\n<!-- 多个过滤器 -->\n{{ message | filterA | filterB }}\n```\n\n过滤器可以接受参数\n```html\n{{ message | filterA('arg1', arg2) }}\n```\n字符串`'arg1'`将传给过滤器作为第二个参数，`arg2`表达式的值将被求值然后传给过滤器作为第三个参数\n\n### 4、缩写\n\n`v-`前缀在模板中是作为一个标示 Vue 特殊属性的明显标识，整个应用都使用vuejs的话，那么前缀`v-`就没有那么重要\n```html\n<!-- v-bind 完整语法 -->\n<a v-bind:href=\"url\"></a>\n<!-- v-bind 缩写 -->\n<a :href=\"url\"></a>\n\n<!-- v-on 完整语法 -->\n<a v-on:click=\"doSomething\"></a>\n<!-- v-on 缩写 -->\n<a @click=\"doSomething\"></a>\n```\n\n实际是，不用缩写也是挺好的。\n\n\n## 二、基本用法\n\n在学习之前，先把<a href=\"//vuefe.cn/v2/guide/installation.html\" target=\"_blank\">vuejs</a>下载下来放在本地，直接使用`script`标签引入即可。\n\n### 1、声明式渲染\n\n```html\n<div id=\"app\">{{ message }}</div>\n```\n\n```javascript\nvar app = new Vue({\n  el: '#app',\n  data: {\n    message: '你好，程序猿！'\n  }\n})\n```\n\n<p>结果输出：<br><span style=\"color: #999;\">你好，程序猿！<span></p>\n\n### 2、绑定 DOM 元素属性\n\n```html\n<div id=\"app-2\">\n  <span v-bind:title=\"message\" v-bind:data-alt=\"message\">鼠标移动到我上边来</span>\n</div>\n```\n\n```javascript\nvar app2 = new Vue({\n  el: '#app-2',\n  data: {\n    message: '什么都没有'\n  }\n})\n```\n\n生成HTML：\n```html\n<div id=\"app-2\"><span title=\"什么都没有\" data-alt=\"什么都没有\">鼠标移动到我上边来</span></div>\n```\n\n### 3、`if`语句\n\n```html\n<div id=\"app-3\">\n  <p v-if=\"seen\">看得见我</p>\n  <p v-if=\"!seen\">看不见我</p>\n</div>\n```\n\n```javascript\nvar app3 = new Vue({\n  el: '#app-3',\n  data: {\n    seen: true\n  }\n})\n```\n\n在命令行改变`app3.seen`的值，会看到页面内容的变化\n\n### 4、`for`循环\n\n```html\n<div id=\"app-4\">\n  <ol>\n    <li v-for=\"item in todos\">\n      {{ item.text }}\n    </li>\n  </ol>\n</div>\n```\n\n```javascript\nvar app4 = new Vue({\n  el: '#app-4',\n  data: {\n    todos: [\n      { text: '不要学 JavaScript' },\n      { text: '不要学 Vue' },\n      { text: '什么都不要学' }\n    ]\n  }\n})\n```\n\n生成HTML：\n```html\n<ol>\n  <li>不要学 JavaScript</li>\n  <li>不要学 Vue</li>\n  <li>什么都不要学</li>\n</ol>\n```\n\n### 5、`v-on`监听事件\n\n```html\n<div id=\"app-5\">\n  <p>{{ message }}</p>\n  <button v-on:click=\"toChange\">点我点我点我</button>\n</div>\n```\n\n```javascript\nvar app5 = new Vue({\n  el: '#app-5',\n  data: {\n    message: '我是一串很长的字符串'\n  },\n  methods: {\n    toChange: function () {\n      this.message = this.message.split('').reverse().join('');\n    }\n  }\n})\n```\n\n点击按钮，文字会经过`toChange`方法处理，进行逆序并输出\n\n### 6、`v-model`指令\n\n在表单输入和应用状态中做双向数据绑定\n\n```html\n<div id=\"app-6\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\n```\n\n```javascript\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: '写点什么好呢'\n  }\n})\n```\n\n改变输入框的值，或者在控制台改变`app6.message`的值，页面中的文本及输入框的值都会同时改变\n\n## 三、组件\n\n将vuejs应用到开发中，组件是必不可少的部分。\n\n```html\n<div id=\"app-7\">\n  <ol>\n    <todo-item v-for=\"item in list\" v-bind:ccc=\"item\"></todo-item>\n\n    <li v-for=\"item in list\">2{{ item.text }}</li>\n  </ol>\n</div>\n```\n上段代码中，`ccc`相当于`function`中接收到的形参，作用于`function`内部\n```javascript\n// 定义组件\nVue.component('todo-item', {\n  props: ['ccc'],\n  template: '<li>{{ ccc.text }}</li>'\n})\n\n// vue实例\nvar app7 = new Vue({\n  el: '#app-7',\n  data: {\n    list: [\n      { text: '不要学 JavaScript' },\n      { text: '不要学 Vue' },\n      { text: '什么都不要学' }\n    ]\n  }\n})\n```\n\n以上代码执行后发现，使用组件输出与直接用`for`循环输出，结果是一致的，但使用组件有更多的可控性\n\n## 四、总结\n\n不需要关注页面dom的操作，只需要管理页面数据即可！\n","source":"_posts/2017-04-26-vuejs基础入门.md","raw":"---\ntitle: vuejs基础入门\ndate: 2017-04-26 10:34:00\ntags: \n- vuejs\ncategories: \n- 学习\n- 笔记\n---\n\n为什么要学习vuejs？因为这两年vuejs蛮火的，而且易入门，实用。\nvuejs 是一套构建用户界面的 渐进式框架。\nvuejs 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。\nvuejs 现在不支持IE8及以下，以后也不会支持。\n\n<!-- more -->\n## 一、基本语法\n\n### 1、插值\n\n#### 1.1 文本\n双大括号包裹住变量名\n```html\n<div id=\"app\">{{ message }}</div>\n```\n\n#### 1.2 纯HTML\n使用`v-html`指令输出html\n```html\n<div v-html=\"message\"></div>\n```\n\n#### 1.3 属性\n使用`v-bind`指令绑定dom元素属性\n```html\n<div v-bind:id=\"message\" v-bind:data-abc=\"message\"></div>\n```\n\n#### 1.4 JavaScript 表达式\n使用双大括号包裹住表达式\n```html\n<p>{{ number + 1 }}</p>\n<p>{{ ok ? 'YES' : 'NO' }}</p>\n<p>{{ message.split('').reverse().join('') }}</p>\n<p v-bind:id=\"'list-' + id\"></p>\n```\n\n这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n类似于一个`function`，执行一系列语句后，必须 return 一个结果。\n\n```html\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n不应该在模板表达式中试图访问用户定义的全局变量\n\n### 2、指令\n\n指令（Directives）是带有 v- 前缀的特殊属性\n\n#### 2.1 参数\n如下：`url`和`doSomething`就是传入vue实例的参数，`url`是一个变量，`doSomething`是一个方法名\n```html\n<a v-bind:href=\"url\"></a>\n<a v-on:click=\"doSomething\">\n```\n\n#### 2.2 修饰符\n修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定\n`.prevent`修饰符告诉`v-on`指令对于触发的事件调用`event.preventDefault()`来阻止默认行为\n```html\n<form v-on:submit.prevent=\"onSubmit\"></form>\n```\n事件修饰符有：`.stop``.prevent``.capture``.self``.once`\n更多修饰符自己查..\n\n### 3、过滤器\n\nvuejs 允许你自定义过滤器，可被用作一些常见的文本格式化。\n过滤器可以用在两个地方：插值和`v-bind`表达式。\n过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示\n\n```html\n<!-- in 插值 -->\n{{ message | capitalize }}\n<!-- in v-bind -->\n<div v-bind:id=\"rawId | formatId\"></div>\n```\n\n```javascript\nnew Vue({\n  // ...\n  filters: {\n    // 自定义过滤器\n    // 过滤器函数总接受表达式的值作为第一个参数\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n})\n```\n\n过滤器可以串联\n```html\n<!-- 多个过滤器 -->\n{{ message | filterA | filterB }}\n```\n\n过滤器可以接受参数\n```html\n{{ message | filterA('arg1', arg2) }}\n```\n字符串`'arg1'`将传给过滤器作为第二个参数，`arg2`表达式的值将被求值然后传给过滤器作为第三个参数\n\n### 4、缩写\n\n`v-`前缀在模板中是作为一个标示 Vue 特殊属性的明显标识，整个应用都使用vuejs的话，那么前缀`v-`就没有那么重要\n```html\n<!-- v-bind 完整语法 -->\n<a v-bind:href=\"url\"></a>\n<!-- v-bind 缩写 -->\n<a :href=\"url\"></a>\n\n<!-- v-on 完整语法 -->\n<a v-on:click=\"doSomething\"></a>\n<!-- v-on 缩写 -->\n<a @click=\"doSomething\"></a>\n```\n\n实际是，不用缩写也是挺好的。\n\n\n## 二、基本用法\n\n在学习之前，先把<a href=\"//vuefe.cn/v2/guide/installation.html\" target=\"_blank\">vuejs</a>下载下来放在本地，直接使用`script`标签引入即可。\n\n### 1、声明式渲染\n\n```html\n<div id=\"app\">{{ message }}</div>\n```\n\n```javascript\nvar app = new Vue({\n  el: '#app',\n  data: {\n    message: '你好，程序猿！'\n  }\n})\n```\n\n<p>结果输出：<br><span style=\"color: #999;\">你好，程序猿！<span></p>\n\n### 2、绑定 DOM 元素属性\n\n```html\n<div id=\"app-2\">\n  <span v-bind:title=\"message\" v-bind:data-alt=\"message\">鼠标移动到我上边来</span>\n</div>\n```\n\n```javascript\nvar app2 = new Vue({\n  el: '#app-2',\n  data: {\n    message: '什么都没有'\n  }\n})\n```\n\n生成HTML：\n```html\n<div id=\"app-2\"><span title=\"什么都没有\" data-alt=\"什么都没有\">鼠标移动到我上边来</span></div>\n```\n\n### 3、`if`语句\n\n```html\n<div id=\"app-3\">\n  <p v-if=\"seen\">看得见我</p>\n  <p v-if=\"!seen\">看不见我</p>\n</div>\n```\n\n```javascript\nvar app3 = new Vue({\n  el: '#app-3',\n  data: {\n    seen: true\n  }\n})\n```\n\n在命令行改变`app3.seen`的值，会看到页面内容的变化\n\n### 4、`for`循环\n\n```html\n<div id=\"app-4\">\n  <ol>\n    <li v-for=\"item in todos\">\n      {{ item.text }}\n    </li>\n  </ol>\n</div>\n```\n\n```javascript\nvar app4 = new Vue({\n  el: '#app-4',\n  data: {\n    todos: [\n      { text: '不要学 JavaScript' },\n      { text: '不要学 Vue' },\n      { text: '什么都不要学' }\n    ]\n  }\n})\n```\n\n生成HTML：\n```html\n<ol>\n  <li>不要学 JavaScript</li>\n  <li>不要学 Vue</li>\n  <li>什么都不要学</li>\n</ol>\n```\n\n### 5、`v-on`监听事件\n\n```html\n<div id=\"app-5\">\n  <p>{{ message }}</p>\n  <button v-on:click=\"toChange\">点我点我点我</button>\n</div>\n```\n\n```javascript\nvar app5 = new Vue({\n  el: '#app-5',\n  data: {\n    message: '我是一串很长的字符串'\n  },\n  methods: {\n    toChange: function () {\n      this.message = this.message.split('').reverse().join('');\n    }\n  }\n})\n```\n\n点击按钮，文字会经过`toChange`方法处理，进行逆序并输出\n\n### 6、`v-model`指令\n\n在表单输入和应用状态中做双向数据绑定\n\n```html\n<div id=\"app-6\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\n```\n\n```javascript\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: '写点什么好呢'\n  }\n})\n```\n\n改变输入框的值，或者在控制台改变`app6.message`的值，页面中的文本及输入框的值都会同时改变\n\n## 三、组件\n\n将vuejs应用到开发中，组件是必不可少的部分。\n\n```html\n<div id=\"app-7\">\n  <ol>\n    <todo-item v-for=\"item in list\" v-bind:ccc=\"item\"></todo-item>\n\n    <li v-for=\"item in list\">2{{ item.text }}</li>\n  </ol>\n</div>\n```\n上段代码中，`ccc`相当于`function`中接收到的形参，作用于`function`内部\n```javascript\n// 定义组件\nVue.component('todo-item', {\n  props: ['ccc'],\n  template: '<li>{{ ccc.text }}</li>'\n})\n\n// vue实例\nvar app7 = new Vue({\n  el: '#app-7',\n  data: {\n    list: [\n      { text: '不要学 JavaScript' },\n      { text: '不要学 Vue' },\n      { text: '什么都不要学' }\n    ]\n  }\n})\n```\n\n以上代码执行后发现，使用组件输出与直接用`for`循环输出，结果是一致的，但使用组件有更多的可控性\n\n## 四、总结\n\n不需要关注页面dom的操作，只需要管理页面数据即可！\n","slug":"vuejs基础入门","published":1,"updated":"2017-04-26T04:13:59.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbroyd7c0005posbweq5oyc3","content":"<p>为什么要学习vuejs？因为这两年vuejs蛮火的，而且易入门，实用。<br>vuejs 是一套构建用户界面的 渐进式框架。<br>vuejs 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。<br>vuejs 现在不支持IE8及以下，以后也不会支持。</p>\n<a id=\"more\"></a>\n<h2 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h2><h3 id=\"1、插值\"><a href=\"#1、插值\" class=\"headerlink\" title=\"1、插值\"></a>1、插值</h3><h4 id=\"1-1-文本\"><a href=\"#1-1-文本\" class=\"headerlink\" title=\"1.1 文本\"></a>1.1 文本</h4><p>双大括号包裹住变量名<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-2-纯HTML\"><a href=\"#1-2-纯HTML\" class=\"headerlink\" title=\"1.2 纯HTML\"></a>1.2 纯HTML</h4><p>使用<code>v-html</code>指令输出html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-属性\"><a href=\"#1-3-属性\" class=\"headerlink\" title=\"1.3 属性\"></a>1.3 属性</h4><p>使用<code>v-bind</code>指令绑定dom元素属性<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">v-bind:data-abc</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-4-JavaScript-表达式\"><a href=\"#1-4-JavaScript-表达式\" class=\"headerlink\" title=\"1.4 JavaScript 表达式\"></a>1.4 JavaScript 表达式</h4><p>使用双大括号包裹住表达式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; number + 1 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message.split('').reverse().join('') &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"'list-' + id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。<br>类似于一个<code>function</code>，执行一系列语句后，必须 return 一个结果。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></div><div class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</div><div class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></div><div class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</div></pre></td></tr></table></figure>\n<p>不应该在模板表达式中试图访问用户定义的全局变量</p>\n<h3 id=\"2、指令\"><a href=\"#2、指令\" class=\"headerlink\" title=\"2、指令\"></a>2、指令</h3><p>指令（Directives）是带有 v- 前缀的特殊属性</p>\n<h4 id=\"2-1-参数\"><a href=\"#2-1-参数\" class=\"headerlink\" title=\"2.1 参数\"></a>2.1 参数</h4><p>如下：<code>url</code>和<code>doSomething</code>就是传入vue实例的参数，<code>url</code>是一个变量，<code>doSomething</code>是一个方法名<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-修饰符\"><a href=\"#2-2-修饰符\" class=\"headerlink\" title=\"2.2 修饰符\"></a>2.2 修饰符</h4><p>修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定<br><code>.prevent</code>修饰符告诉<code>v-on</code>指令对于触发的事件调用<code>event.preventDefault()</code>来阻止默认行为<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>事件修饰符有：<code>.stop``.prevent``.capture``.self``.once</code><br>更多修饰符自己查..</p>\n<h3 id=\"3、过滤器\"><a href=\"#3、过滤器\" class=\"headerlink\" title=\"3、过滤器\"></a>3、过滤器</h3><p>vuejs 允许你自定义过滤器，可被用作一些常见的文本格式化。<br>过滤器可以用在两个地方：插值和<code>v-bind</code>表达式。<br>过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- in 插值 --&gt;</span></div><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div><div class=\"line\"><span class=\"comment\">&lt;!-- in v-bind --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"rawId | formatId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  filters: &#123;</div><div class=\"line\">    <span class=\"comment\">// 自定义过滤器</span></div><div class=\"line\">    <span class=\"comment\">// 过滤器函数总接受表达式的值作为第一个参数</span></div><div class=\"line\">    capitalize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">      value = value.toString()</div><div class=\"line\">      <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>过滤器可以串联<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 多个过滤器 --&gt;</span></div><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>过滤器可以接受参数<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>字符串<code>&#39;arg1&#39;</code>将传给过滤器作为第二个参数，<code>arg2</code>表达式的值将被求值然后传给过滤器作为第三个参数</p>\n<h3 id=\"4、缩写\"><a href=\"#4、缩写\" class=\"headerlink\" title=\"4、缩写\"></a>4、缩写</h3><p><code>v-</code>前缀在模板中是作为一个标示 Vue 特殊属性的明显标识，整个应用都使用vuejs的话，那么前缀<code>v-</code>就没有那么重要<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- v-bind 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-bind 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-on 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-on 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>实际是，不用缩写也是挺好的。</p>\n<h2 id=\"二、基本用法\"><a href=\"#二、基本用法\" class=\"headerlink\" title=\"二、基本用法\"></a>二、基本用法</h2><p>在学习之前，先把<a href=\"//vuefe.cn/v2/guide/installation.html\" target=\"_blank\">vuejs</a>下载下来放在本地，直接使用<code>script</code>标签引入即可。</p>\n<h3 id=\"1、声明式渲染\"><a href=\"#1、声明式渲染\" class=\"headerlink\" title=\"1、声明式渲染\"></a>1、声明式渲染</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'你好，程序猿！'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>结果输出：<br><span style=\"color: #999;\">你好，程序猿！<span></span></span></p>\n\n<h3 id=\"2、绑定-DOM-元素属性\"><a href=\"#2、绑定-DOM-元素属性\" class=\"headerlink\" title=\"2、绑定 DOM 元素属性\"></a>2、绑定 DOM 元素属性</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">v-bind:data-alt</span>=<span class=\"string\">\"message\"</span>&gt;</span>鼠标移动到我上边来<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app2 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-2'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'什么都没有'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>生成HTML：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\"什么都没有\"</span> <span class=\"attr\">data-alt</span>=<span class=\"string\">\"什么都没有\"</span>&gt;</span>鼠标移动到我上边来<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3、if语句\"><a href=\"#3、if语句\" class=\"headerlink\" title=\"3、if语句\"></a>3、<code>if</code>语句</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>看得见我<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!seen\"</span>&gt;</span>看不见我<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app3 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-3'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">seen</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在命令行改变<code>app3.seen</code>的值，会看到页面内容的变化</p>\n<h3 id=\"4、for循环\"><a href=\"#4、for循环\" class=\"headerlink\" title=\"4、for循环\"></a>4、<code>for</code>循环</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-4\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in todos\"</span>&gt;</span></div><div class=\"line\">      &#123;&#123; item.text &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app4 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-4'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">todos</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 JavaScript'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 Vue'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'什么都不要学'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>生成HTML：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>不要学 JavaScript<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>不要学 Vue<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>什么都不要学<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"5、v-on监听事件\"><a href=\"#5、v-on监听事件\" class=\"headerlink\" title=\"5、v-on监听事件\"></a>5、<code>v-on</code>监听事件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-5\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"toChange\"</span>&gt;</span>点我点我点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app5 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-5'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'我是一串很长的字符串'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">toChange</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>点击按钮，文字会经过<code>toChange</code>方法处理，进行逆序并输出</p>\n<h3 id=\"6、v-model指令\"><a href=\"#6、v-model指令\" class=\"headerlink\" title=\"6、v-model指令\"></a>6、<code>v-model</code>指令</h3><p>在表单输入和应用状态中做双向数据绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-6\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app6 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-6'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'写点什么好呢'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>改变输入框的值，或者在控制台改变<code>app6.message</code>的值，页面中的文本及输入框的值都会同时改变</p>\n<h2 id=\"三、组件\"><a href=\"#三、组件\" class=\"headerlink\" title=\"三、组件\"></a>三、组件</h2><p>将vuejs应用到开发中，组件是必不可少的部分。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-7\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">todo-item</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span> <span class=\"attr\">v-bind:ccc</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">todo-item</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span>&gt;</span>2&#123;&#123; item.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上段代码中，<code>ccc</code>相当于<code>function</code>中接收到的形参，作用于<code>function</code>内部<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义组件</span></div><div class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'ccc'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;li&gt;&#123;&#123; ccc.text &#125;&#125;&lt;/li&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// vue实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> app7 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-7'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">list</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 JavaScript'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 Vue'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'什么都不要学'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>以上代码执行后发现，使用组件输出与直接用<code>for</code>循环输出，结果是一致的，但使用组件有更多的可控性</p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>不需要关注页面dom的操作，只需要管理页面数据即可！</p>\n","excerpt":"<p>为什么要学习vuejs？因为这两年vuejs蛮火的，而且易入门，实用。<br>vuejs 是一套构建用户界面的 渐进式框架。<br>vuejs 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。<br>vuejs 现在不支持IE8及以下，以后也不会支持。</p>","more":"<h2 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h2><h3 id=\"1、插值\"><a href=\"#1、插值\" class=\"headerlink\" title=\"1、插值\"></a>1、插值</h3><h4 id=\"1-1-文本\"><a href=\"#1-1-文本\" class=\"headerlink\" title=\"1.1 文本\"></a>1.1 文本</h4><p>双大括号包裹住变量名<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-2-纯HTML\"><a href=\"#1-2-纯HTML\" class=\"headerlink\" title=\"1.2 纯HTML\"></a>1.2 纯HTML</h4><p>使用<code>v-html</code>指令输出html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-属性\"><a href=\"#1-3-属性\" class=\"headerlink\" title=\"1.3 属性\"></a>1.3 属性</h4><p>使用<code>v-bind</code>指令绑定dom元素属性<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">v-bind:data-abc</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-4-JavaScript-表达式\"><a href=\"#1-4-JavaScript-表达式\" class=\"headerlink\" title=\"1.4 JavaScript 表达式\"></a>1.4 JavaScript 表达式</h4><p>使用双大括号包裹住表达式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; number + 1 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message.split('').reverse().join('') &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"'list-' + id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。<br>类似于一个<code>function</code>，执行一系列语句后，必须 return 一个结果。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></div><div class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</div><div class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></div><div class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</div></pre></td></tr></table></figure>\n<p>不应该在模板表达式中试图访问用户定义的全局变量</p>\n<h3 id=\"2、指令\"><a href=\"#2、指令\" class=\"headerlink\" title=\"2、指令\"></a>2、指令</h3><p>指令（Directives）是带有 v- 前缀的特殊属性</p>\n<h4 id=\"2-1-参数\"><a href=\"#2-1-参数\" class=\"headerlink\" title=\"2.1 参数\"></a>2.1 参数</h4><p>如下：<code>url</code>和<code>doSomething</code>就是传入vue实例的参数，<code>url</code>是一个变量，<code>doSomething</code>是一个方法名<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-修饰符\"><a href=\"#2-2-修饰符\" class=\"headerlink\" title=\"2.2 修饰符\"></a>2.2 修饰符</h4><p>修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定<br><code>.prevent</code>修饰符告诉<code>v-on</code>指令对于触发的事件调用<code>event.preventDefault()</code>来阻止默认行为<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>事件修饰符有：<code>.stop``.prevent``.capture``.self``.once</code><br>更多修饰符自己查..</p>\n<h3 id=\"3、过滤器\"><a href=\"#3、过滤器\" class=\"headerlink\" title=\"3、过滤器\"></a>3、过滤器</h3><p>vuejs 允许你自定义过滤器，可被用作一些常见的文本格式化。<br>过滤器可以用在两个地方：插值和<code>v-bind</code>表达式。<br>过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- in 插值 --&gt;</span></div><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div><div class=\"line\"><span class=\"comment\">&lt;!-- in v-bind --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"rawId | formatId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  filters: &#123;</div><div class=\"line\">    <span class=\"comment\">// 自定义过滤器</span></div><div class=\"line\">    <span class=\"comment\">// 过滤器函数总接受表达式的值作为第一个参数</span></div><div class=\"line\">    capitalize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">      value = value.toString()</div><div class=\"line\">      <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>过滤器可以串联<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 多个过滤器 --&gt;</span></div><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>过滤器可以接受参数<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>字符串<code>&#39;arg1&#39;</code>将传给过滤器作为第二个参数，<code>arg2</code>表达式的值将被求值然后传给过滤器作为第三个参数</p>\n<h3 id=\"4、缩写\"><a href=\"#4、缩写\" class=\"headerlink\" title=\"4、缩写\"></a>4、缩写</h3><p><code>v-</code>前缀在模板中是作为一个标示 Vue 特殊属性的明显标识，整个应用都使用vuejs的话，那么前缀<code>v-</code>就没有那么重要<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- v-bind 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-bind 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-on 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-on 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>实际是，不用缩写也是挺好的。</p>\n<h2 id=\"二、基本用法\"><a href=\"#二、基本用法\" class=\"headerlink\" title=\"二、基本用法\"></a>二、基本用法</h2><p>在学习之前，先把<a href=\"//vuefe.cn/v2/guide/installation.html\" target=\"_blank\">vuejs</a>下载下来放在本地，直接使用<code>script</code>标签引入即可。</p>\n<h3 id=\"1、声明式渲染\"><a href=\"#1、声明式渲染\" class=\"headerlink\" title=\"1、声明式渲染\"></a>1、声明式渲染</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'你好，程序猿！'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>结果输出：<br><span style=\"color: #999;\">你好，程序猿！<span></p>\n\n<h3 id=\"2、绑定-DOM-元素属性\"><a href=\"#2、绑定-DOM-元素属性\" class=\"headerlink\" title=\"2、绑定 DOM 元素属性\"></a>2、绑定 DOM 元素属性</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">v-bind:data-alt</span>=<span class=\"string\">\"message\"</span>&gt;</span>鼠标移动到我上边来<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app2 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-2'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'什么都没有'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>生成HTML：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\"什么都没有\"</span> <span class=\"attr\">data-alt</span>=<span class=\"string\">\"什么都没有\"</span>&gt;</span>鼠标移动到我上边来<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3、if语句\"><a href=\"#3、if语句\" class=\"headerlink\" title=\"3、if语句\"></a>3、<code>if</code>语句</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>看得见我<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!seen\"</span>&gt;</span>看不见我<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app3 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-3'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">seen</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在命令行改变<code>app3.seen</code>的值，会看到页面内容的变化</p>\n<h3 id=\"4、for循环\"><a href=\"#4、for循环\" class=\"headerlink\" title=\"4、for循环\"></a>4、<code>for</code>循环</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-4\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in todos\"</span>&gt;</span></div><div class=\"line\">      &#123;&#123; item.text &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app4 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-4'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">todos</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 JavaScript'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 Vue'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'什么都不要学'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>生成HTML：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>不要学 JavaScript<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>不要学 Vue<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>什么都不要学<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"5、v-on监听事件\"><a href=\"#5、v-on监听事件\" class=\"headerlink\" title=\"5、v-on监听事件\"></a>5、<code>v-on</code>监听事件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-5\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"toChange\"</span>&gt;</span>点我点我点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app5 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-5'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'我是一串很长的字符串'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">toChange</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>点击按钮，文字会经过<code>toChange</code>方法处理，进行逆序并输出</p>\n<h3 id=\"6、v-model指令\"><a href=\"#6、v-model指令\" class=\"headerlink\" title=\"6、v-model指令\"></a>6、<code>v-model</code>指令</h3><p>在表单输入和应用状态中做双向数据绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-6\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app6 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-6'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'写点什么好呢'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>改变输入框的值，或者在控制台改变<code>app6.message</code>的值，页面中的文本及输入框的值都会同时改变</p>\n<h2 id=\"三、组件\"><a href=\"#三、组件\" class=\"headerlink\" title=\"三、组件\"></a>三、组件</h2><p>将vuejs应用到开发中，组件是必不可少的部分。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-7\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">todo-item</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span> <span class=\"attr\">v-bind:ccc</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">todo-item</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span>&gt;</span>2&#123;&#123; item.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上段代码中，<code>ccc</code>相当于<code>function</code>中接收到的形参，作用于<code>function</code>内部<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义组件</span></div><div class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'ccc'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;li&gt;&#123;&#123; ccc.text &#125;&#125;&lt;/li&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// vue实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> app7 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-7'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">list</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 JavaScript'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 Vue'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'什么都不要学'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>以上代码执行后发现，使用组件输出与直接用<code>for</code>循环输出，结果是一致的，但使用组件有更多的可控性</p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>不需要关注页面dom的操作，只需要管理页面数据即可！</p>"},{"title":"在 github pages 添加自定义域名","date":"2017-05-12T03:16:22.000Z","_content":"\n在github上搭建静态页面博客，会得到一个可在线访问的地址，例如我的博客地址是`fredwei.github.io`。\n\n显然这个地址比较难记，不过github允许用户绑定自定义域名。\n\n<!-- more -->\n\n## 一、首先，你的搭建好你的博客\n\n我使用的是`hexo`在`github`上搭建的个人博客，当然你也可以用其他的，但是最终上传到github上的内容基本上是一直的，如下图：\n\n![](/images/20170512112604.png)\n\n绑定自定义域名的前提是，你已经把博客已经搭建好了。\n如果还不知道怎么搭建博客，可以参考这里[hexo搭建教程](http://baixin.io/2015/08/HEXO搭建个人博客/)或者[hexo官网](https://hexo.io/)\n\n## 二、拿到博客的IP地址\n\n打开命令行工具，ping一下github给到的博客地址，拿到一个ip地址，如`ping fredwei.github.io`\n\n![](/images/20170512113238.png)\n\n## 三、将你的域名解析到这个IP地址\n\n如果是域名解析的记录类型是`A`，那么就指向IP\n\n![](/images/20170512113631.png)\n\n如果是`CNAME`，那么就指向你的博客域名（如fredwei.github.io），相当于重定向，这里不做演示。\n\n\n## 四、添加CNAME文件\n\n一般来讲，域名解析到指定的IP，就可以通过域名访问该网站了。然而在github上还需要做一步操作，就是添加`CNAME`文件（无后缀名）。\n\n![](/images/20170512114045.png)\n\n文件的内容很简单，就是你的域名\n\n```javascript\nwww.fredwei.com\n```\n\n## 五、完成\n\n最后一步当然是上传到github上了，使用hexo的一个命令`hexo d`，上传成功后，即可通过域名访问到你的博客了。\n\n如果没有用`hexo`，那就自行上传吧。\n\n![](/images/20170512115239.png)\n\n收工~\n\n","source":"_posts/2017-05-12-添加自定义域名.md","raw":"title: 在 github pages 添加自定义域名\ndate: 2017-05-12 11:16:22\ntags:\n- github\n- github pasges\n- cname\n---\n\n在github上搭建静态页面博客，会得到一个可在线访问的地址，例如我的博客地址是`fredwei.github.io`。\n\n显然这个地址比较难记，不过github允许用户绑定自定义域名。\n\n<!-- more -->\n\n## 一、首先，你的搭建好你的博客\n\n我使用的是`hexo`在`github`上搭建的个人博客，当然你也可以用其他的，但是最终上传到github上的内容基本上是一直的，如下图：\n\n![](/images/20170512112604.png)\n\n绑定自定义域名的前提是，你已经把博客已经搭建好了。\n如果还不知道怎么搭建博客，可以参考这里[hexo搭建教程](http://baixin.io/2015/08/HEXO搭建个人博客/)或者[hexo官网](https://hexo.io/)\n\n## 二、拿到博客的IP地址\n\n打开命令行工具，ping一下github给到的博客地址，拿到一个ip地址，如`ping fredwei.github.io`\n\n![](/images/20170512113238.png)\n\n## 三、将你的域名解析到这个IP地址\n\n如果是域名解析的记录类型是`A`，那么就指向IP\n\n![](/images/20170512113631.png)\n\n如果是`CNAME`，那么就指向你的博客域名（如fredwei.github.io），相当于重定向，这里不做演示。\n\n\n## 四、添加CNAME文件\n\n一般来讲，域名解析到指定的IP，就可以通过域名访问该网站了。然而在github上还需要做一步操作，就是添加`CNAME`文件（无后缀名）。\n\n![](/images/20170512114045.png)\n\n文件的内容很简单，就是你的域名\n\n```javascript\nwww.fredwei.com\n```\n\n## 五、完成\n\n最后一步当然是上传到github上了，使用hexo的一个命令`hexo d`，上传成功后，即可通过域名访问到你的博客了。\n\n如果没有用`hexo`，那就自行上传吧。\n\n![](/images/20170512115239.png)\n\n收工~\n\n","slug":"添加自定义域名","published":1,"updated":"2017-05-12T05:43:44.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbroyd7k0006posbe6vq0c9v","content":"<p>在github上搭建静态页面博客，会得到一个可在线访问的地址，例如我的博客地址是<code>fredwei.github.io</code>。</p>\n<p>显然这个地址比较难记，不过github允许用户绑定自定义域名。</p>\n<a id=\"more\"></a>\n<h2 id=\"一、首先，你的搭建好你的博客\"><a href=\"#一、首先，你的搭建好你的博客\" class=\"headerlink\" title=\"一、首先，你的搭建好你的博客\"></a>一、首先，你的搭建好你的博客</h2><p>我使用的是<code>hexo</code>在<code>github</code>上搭建的个人博客，当然你也可以用其他的，但是最终上传到github上的内容基本上是一直的，如下图：</p>\n<p><img src=\"/images/20170512112604.png\" alt=\"\"></p>\n<p>绑定自定义域名的前提是，你已经把博客已经搭建好了。<br>如果还不知道怎么搭建博客，可以参考这里<a href=\"http://baixin.io/2015/08/HEXO搭建个人博客/\" target=\"_blank\" rel=\"external\">hexo搭建教程</a>或者<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">hexo官网</a></p>\n<h2 id=\"二、拿到博客的IP地址\"><a href=\"#二、拿到博客的IP地址\" class=\"headerlink\" title=\"二、拿到博客的IP地址\"></a>二、拿到博客的IP地址</h2><p>打开命令行工具，ping一下github给到的博客地址，拿到一个ip地址，如<code>ping fredwei.github.io</code></p>\n<p><img src=\"/images/20170512113238.png\" alt=\"\"></p>\n<h2 id=\"三、将你的域名解析到这个IP地址\"><a href=\"#三、将你的域名解析到这个IP地址\" class=\"headerlink\" title=\"三、将你的域名解析到这个IP地址\"></a>三、将你的域名解析到这个IP地址</h2><p>如果是域名解析的记录类型是<code>A</code>，那么就指向IP</p>\n<p><img src=\"/images/20170512113631.png\" alt=\"\"></p>\n<p>如果是<code>CNAME</code>，那么就指向你的博客域名（如fredwei.github.io），相当于重定向，这里不做演示。</p>\n<h2 id=\"四、添加CNAME文件\"><a href=\"#四、添加CNAME文件\" class=\"headerlink\" title=\"四、添加CNAME文件\"></a>四、添加CNAME文件</h2><p>一般来讲，域名解析到指定的IP，就可以通过域名访问该网站了。然而在github上还需要做一步操作，就是添加<code>CNAME</code>文件（无后缀名）。</p>\n<p><img src=\"/images/20170512114045.png\" alt=\"\"></p>\n<p>文件的内容很简单，就是你的域名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">www.fredwei.com</div></pre></td></tr></table></figure>\n<h2 id=\"五、完成\"><a href=\"#五、完成\" class=\"headerlink\" title=\"五、完成\"></a>五、完成</h2><p>最后一步当然是上传到github上了，使用hexo的一个命令<code>hexo d</code>，上传成功后，即可通过域名访问到你的博客了。</p>\n<p>如果没有用<code>hexo</code>，那就自行上传吧。</p>\n<p><img src=\"/images/20170512115239.png\" alt=\"\"></p>\n<p>收工~</p>\n","excerpt":"<p>在github上搭建静态页面博客，会得到一个可在线访问的地址，例如我的博客地址是<code>fredwei.github.io</code>。</p>\n<p>显然这个地址比较难记，不过github允许用户绑定自定义域名。</p>","more":"<h2 id=\"一、首先，你的搭建好你的博客\"><a href=\"#一、首先，你的搭建好你的博客\" class=\"headerlink\" title=\"一、首先，你的搭建好你的博客\"></a>一、首先，你的搭建好你的博客</h2><p>我使用的是<code>hexo</code>在<code>github</code>上搭建的个人博客，当然你也可以用其他的，但是最终上传到github上的内容基本上是一直的，如下图：</p>\n<p><img src=\"/images/20170512112604.png\" alt=\"\"></p>\n<p>绑定自定义域名的前提是，你已经把博客已经搭建好了。<br>如果还不知道怎么搭建博客，可以参考这里<a href=\"http://baixin.io/2015/08/HEXO搭建个人博客/\">hexo搭建教程</a>或者<a href=\"https://hexo.io/\">hexo官网</a></p>\n<h2 id=\"二、拿到博客的IP地址\"><a href=\"#二、拿到博客的IP地址\" class=\"headerlink\" title=\"二、拿到博客的IP地址\"></a>二、拿到博客的IP地址</h2><p>打开命令行工具，ping一下github给到的博客地址，拿到一个ip地址，如<code>ping fredwei.github.io</code></p>\n<p><img src=\"/images/20170512113238.png\" alt=\"\"></p>\n<h2 id=\"三、将你的域名解析到这个IP地址\"><a href=\"#三、将你的域名解析到这个IP地址\" class=\"headerlink\" title=\"三、将你的域名解析到这个IP地址\"></a>三、将你的域名解析到这个IP地址</h2><p>如果是域名解析的记录类型是<code>A</code>，那么就指向IP</p>\n<p><img src=\"/images/20170512113631.png\" alt=\"\"></p>\n<p>如果是<code>CNAME</code>，那么就指向你的博客域名（如fredwei.github.io），相当于重定向，这里不做演示。</p>\n<h2 id=\"四、添加CNAME文件\"><a href=\"#四、添加CNAME文件\" class=\"headerlink\" title=\"四、添加CNAME文件\"></a>四、添加CNAME文件</h2><p>一般来讲，域名解析到指定的IP，就可以通过域名访问该网站了。然而在github上还需要做一步操作，就是添加<code>CNAME</code>文件（无后缀名）。</p>\n<p><img src=\"/images/20170512114045.png\" alt=\"\"></p>\n<p>文件的内容很简单，就是你的域名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">www.fredwei.com</div></pre></td></tr></table></figure>\n<h2 id=\"五、完成\"><a href=\"#五、完成\" class=\"headerlink\" title=\"五、完成\"></a>五、完成</h2><p>最后一步当然是上传到github上了，使用hexo的一个命令<code>hexo d</code>，上传成功后，即可通过域名访问到你的博客了。</p>\n<p>如果没有用<code>hexo</code>，那就自行上传吧。</p>\n<p><img src=\"/images/20170512115239.png\" alt=\"\"></p>\n<p>收工~</p>"},{"title":"Web Worker","date":"2017-05-25T04:26:19.000Z","_content":"\n总所周知，javascript是单线程的，当一个函数执行的时候，JS引擎会锁住DOM树，其他事件的响应代码只能在队列中等待，并且此时页面卡死。\n如果某些脚本比较复杂、耗时，那么将会阻塞javascript继续执行，甚至导致浏览器失去响应。\n那么要实现javascript的多线程，ajax异步请求可以开辟一个新的线程来处理请求的业务，并不是真正意义上的多线程。\n在HTML5中，引入了Web Worker这个概念，它能够在另外一个线程中执行计算密集的JS代码而不引起页面卡死，这是真正的多线程。\n\n<!-- more -->\n\n## 一、setTimeout和setInterval\n\n使用定时器看似是可以多个事件同时处理，其实并非是多线程的。\n\n定时器只是一个定时的事件触发器，它们在合适的时间把一些JS代码塞到JS引擎的队列中，然后JS会逐个处理队列中的事件。\n\n## 二、Web Worker 简介\n\n在HTML5中，引入了Web Worker这个概念。它能够在另外一个线程中执行计算密集的JS代码而不引起页面卡死，这是真正的多线程。然而为了保证线程安全，Worker中的代码是不能访问DOM的。具体解释请看[火狐开发文档-Worker](https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/Worker)\n\n官方的解释：\nWeb Workers是一种机制，通过它可以使一个脚本操作在与Web应用程序的主执行线程分离的后台线程中运行。这样做的优点是可以在单独的线程中执行繁琐的处理，让主（通常是UI）线程运行而不被阻塞/减慢。\n\n特别提醒，运行worker多线程，需要在服务器环境下，所以在跑一下demo时，请自行搭建运行环境。\n\n## 三、Worker基本用法\n\n首先，先了解下worker常用的两个方法`onmessage`和`postMessage`，`onmessage`是监听worker文件返回数据的回调方法，`postMessage`是worker返回页面的数据的方法。示例如下：\n\n页面文件：\n```html\n<button id=\"btn1\">有worker</button>\n<button id=\"btn2\">无worker</button>\n\n<div id=\"time\"></div>\n<div id=\"output\" style=\"height: 400px; border: 1px solid #ccc; overflow-y: auto; word-break: break-all;\"></div>\n\n<script>\nif(typeof(Worker) !== \"undefined\"){\n  // var _worker = new Worker('demo2.js');\n}\n\nfunction workerInit(){\n  if(typeof(Worker) !== \"undefined\"){\n    var _html = [];\n    var _worker = new Worker('demo2.js');\n\n    _worker.onmessage = function(event) {\n      if(event.data.n){\n        _html.push(event.data.n);\n      }\n\n      if(event.data.t){\n        document.getElementById('output').innerHTML = _html.join(',');\n        document.getElementById('time').innerHTML = '耗时：' + (new Date().getTime() - event.data.t + '毫秒');\n      }\n    }\n  }else{\n    alert('不支持 Worker');\n  }\n}\n\nvar btn1 = document.getElementById('btn1');\nvar btn2 = document.getElementById('btn2');\n\nbtn1.onclick = workerInit;\nbtn2.onclick = function(){\n  var n = 1;\n  var _t = new Date().getTime();\n  var _h = [];\n\n  abc:while(n < 99999){\n    ++n;\n\n    // 查找质数（在大于1的自然数中，除了1和该整数自身外，无法被其他自然数整除的数）\n    for (var i = 2; i <= Math.sqrt(n); i++) {\n      if(n%i == 0){\n        continue abc;\n      }\n    }\n\n    _h.push(n);\n  }\n\n  document.getElementById('output').innerHTML = _h.join(',');\n  document.getElementById('time').innerHTML = '耗时：' + (new Date().getTime() - _t + '毫秒');\n};\n</script>\n```\ntips:发现个奇怪的问题，如上代码第`9`行，在外部定义了worker之后，在`workerInit`方法中无法正常调用，而且并没有报错。\n\n\nworker文件`demo2.js`：\n```javascript\nvar n = 1;\nvar _t = new Date().getTime();\n\nsearch:while(n < 99999){\n  ++n;\n\n  // 查找质数（在大于1的自然数中，除了1和该整数自身外，无法被其他自然数整除的数）\n  for (var i = 2; i <= Math.sqrt(n); i++) {\n    if(n%i == 0){\n      continue search;\n    }\n  }\n\n  // console.log(new Date().getTime() - _t, n);\n  // document.getElementById('output').innerHTML += (n + '，');\n  postMessage({\n    n: n\n  });\n}\n\npostMessage({\n  t: _t\n});\n```\n\n以上代码中，在1-99999中查找质数，每找到一个，使用`postMessage`返回一次，循环结束后，返回循环开始的时间。\n\n应用worker与原生js处理相同业务所需的时间是多少呢？\n应用worker五次运行分别耗时（平均204.8ms）：204ms，216ms，197ms，208ms，199ms\n原生js五次运行分别耗时（平均32.4ms）：40ms，38ms，24ms，32ms，28ms\n\n以执行速度来看，查找1-99999中的质数，原生js比worker快大约6倍\n\n当然这并不意味这worker是个无用的功能，在某些应用场景还是很适用的。\n\n最后worker除了`onmessage`和`postMessage`这两个方法，还有其他的约束及api，具体请自行查看文档[火狐开发文档-Worker](https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/Worker)\n\n## 四、兼容问题\n\n无法避免的兼容问题，除了worker对象的兼容，还有worker api的兼容也各不同，以下是worker对象的兼容。\n\n桌面端：\n\n| Feature       | Chrome | Firefox (Gecko) | Internet Explorer | Opera | Safari (WebKit)  |\n| :-----------: | :----: | :-------------: | :---------------: | :---: | :--------------: |\n| Basic support | 4      | 3.5             | 10.0              | 10.6  | 4                |\n\n移动端：\n\n| Feature       | Android | Firefox Mobile (Gecko) | Firefox OS (Gecko) | IE Phone | Opera Mobile | Safari Mobile |\n| :-----------: | :-----: | :--------------------: | :----------------: | :------: | :----------: | :-----------: |\n| Basic support | 4.4     | 3.5                    | 1.0.1              | 10.0     | 11.5         | 5.1           |","source":"_posts/2017-05-25-workers.md","raw":"---\ntitle: Web Worker\ndate: 2017-05-25 12:26:19\ntags: \n- html5\n- workers\n- web api\ncategories: \n- 分享\n---\n\n总所周知，javascript是单线程的，当一个函数执行的时候，JS引擎会锁住DOM树，其他事件的响应代码只能在队列中等待，并且此时页面卡死。\n如果某些脚本比较复杂、耗时，那么将会阻塞javascript继续执行，甚至导致浏览器失去响应。\n那么要实现javascript的多线程，ajax异步请求可以开辟一个新的线程来处理请求的业务，并不是真正意义上的多线程。\n在HTML5中，引入了Web Worker这个概念，它能够在另外一个线程中执行计算密集的JS代码而不引起页面卡死，这是真正的多线程。\n\n<!-- more -->\n\n## 一、setTimeout和setInterval\n\n使用定时器看似是可以多个事件同时处理，其实并非是多线程的。\n\n定时器只是一个定时的事件触发器，它们在合适的时间把一些JS代码塞到JS引擎的队列中，然后JS会逐个处理队列中的事件。\n\n## 二、Web Worker 简介\n\n在HTML5中，引入了Web Worker这个概念。它能够在另外一个线程中执行计算密集的JS代码而不引起页面卡死，这是真正的多线程。然而为了保证线程安全，Worker中的代码是不能访问DOM的。具体解释请看[火狐开发文档-Worker](https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/Worker)\n\n官方的解释：\nWeb Workers是一种机制，通过它可以使一个脚本操作在与Web应用程序的主执行线程分离的后台线程中运行。这样做的优点是可以在单独的线程中执行繁琐的处理，让主（通常是UI）线程运行而不被阻塞/减慢。\n\n特别提醒，运行worker多线程，需要在服务器环境下，所以在跑一下demo时，请自行搭建运行环境。\n\n## 三、Worker基本用法\n\n首先，先了解下worker常用的两个方法`onmessage`和`postMessage`，`onmessage`是监听worker文件返回数据的回调方法，`postMessage`是worker返回页面的数据的方法。示例如下：\n\n页面文件：\n```html\n<button id=\"btn1\">有worker</button>\n<button id=\"btn2\">无worker</button>\n\n<div id=\"time\"></div>\n<div id=\"output\" style=\"height: 400px; border: 1px solid #ccc; overflow-y: auto; word-break: break-all;\"></div>\n\n<script>\nif(typeof(Worker) !== \"undefined\"){\n  // var _worker = new Worker('demo2.js');\n}\n\nfunction workerInit(){\n  if(typeof(Worker) !== \"undefined\"){\n    var _html = [];\n    var _worker = new Worker('demo2.js');\n\n    _worker.onmessage = function(event) {\n      if(event.data.n){\n        _html.push(event.data.n);\n      }\n\n      if(event.data.t){\n        document.getElementById('output').innerHTML = _html.join(',');\n        document.getElementById('time').innerHTML = '耗时：' + (new Date().getTime() - event.data.t + '毫秒');\n      }\n    }\n  }else{\n    alert('不支持 Worker');\n  }\n}\n\nvar btn1 = document.getElementById('btn1');\nvar btn2 = document.getElementById('btn2');\n\nbtn1.onclick = workerInit;\nbtn2.onclick = function(){\n  var n = 1;\n  var _t = new Date().getTime();\n  var _h = [];\n\n  abc:while(n < 99999){\n    ++n;\n\n    // 查找质数（在大于1的自然数中，除了1和该整数自身外，无法被其他自然数整除的数）\n    for (var i = 2; i <= Math.sqrt(n); i++) {\n      if(n%i == 0){\n        continue abc;\n      }\n    }\n\n    _h.push(n);\n  }\n\n  document.getElementById('output').innerHTML = _h.join(',');\n  document.getElementById('time').innerHTML = '耗时：' + (new Date().getTime() - _t + '毫秒');\n};\n</script>\n```\ntips:发现个奇怪的问题，如上代码第`9`行，在外部定义了worker之后，在`workerInit`方法中无法正常调用，而且并没有报错。\n\n\nworker文件`demo2.js`：\n```javascript\nvar n = 1;\nvar _t = new Date().getTime();\n\nsearch:while(n < 99999){\n  ++n;\n\n  // 查找质数（在大于1的自然数中，除了1和该整数自身外，无法被其他自然数整除的数）\n  for (var i = 2; i <= Math.sqrt(n); i++) {\n    if(n%i == 0){\n      continue search;\n    }\n  }\n\n  // console.log(new Date().getTime() - _t, n);\n  // document.getElementById('output').innerHTML += (n + '，');\n  postMessage({\n    n: n\n  });\n}\n\npostMessage({\n  t: _t\n});\n```\n\n以上代码中，在1-99999中查找质数，每找到一个，使用`postMessage`返回一次，循环结束后，返回循环开始的时间。\n\n应用worker与原生js处理相同业务所需的时间是多少呢？\n应用worker五次运行分别耗时（平均204.8ms）：204ms，216ms，197ms，208ms，199ms\n原生js五次运行分别耗时（平均32.4ms）：40ms，38ms，24ms，32ms，28ms\n\n以执行速度来看，查找1-99999中的质数，原生js比worker快大约6倍\n\n当然这并不意味这worker是个无用的功能，在某些应用场景还是很适用的。\n\n最后worker除了`onmessage`和`postMessage`这两个方法，还有其他的约束及api，具体请自行查看文档[火狐开发文档-Worker](https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/Worker)\n\n## 四、兼容问题\n\n无法避免的兼容问题，除了worker对象的兼容，还有worker api的兼容也各不同，以下是worker对象的兼容。\n\n桌面端：\n\n| Feature       | Chrome | Firefox (Gecko) | Internet Explorer | Opera | Safari (WebKit)  |\n| :-----------: | :----: | :-------------: | :---------------: | :---: | :--------------: |\n| Basic support | 4      | 3.5             | 10.0              | 10.6  | 4                |\n\n移动端：\n\n| Feature       | Android | Firefox Mobile (Gecko) | Firefox OS (Gecko) | IE Phone | Opera Mobile | Safari Mobile |\n| :-----------: | :-----: | :--------------------: | :----------------: | :------: | :----------: | :-----------: |\n| Basic support | 4.4     | 3.5                    | 1.0.1              | 10.0     | 11.5         | 5.1           |","slug":"workers","published":1,"updated":"2017-05-25T05:14:11.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbroyd7o0009posbb2oxv4cu","content":"<p>总所周知，javascript是单线程的，当一个函数执行的时候，JS引擎会锁住DOM树，其他事件的响应代码只能在队列中等待，并且此时页面卡死。<br>如果某些脚本比较复杂、耗时，那么将会阻塞javascript继续执行，甚至导致浏览器失去响应。<br>那么要实现javascript的多线程，ajax异步请求可以开辟一个新的线程来处理请求的业务，并不是真正意义上的多线程。<br>在HTML5中，引入了Web Worker这个概念，它能够在另外一个线程中执行计算密集的JS代码而不引起页面卡死，这是真正的多线程。</p>\n<a id=\"more\"></a>\n<h2 id=\"一、setTimeout和setInterval\"><a href=\"#一、setTimeout和setInterval\" class=\"headerlink\" title=\"一、setTimeout和setInterval\"></a>一、setTimeout和setInterval</h2><p>使用定时器看似是可以多个事件同时处理，其实并非是多线程的。</p>\n<p>定时器只是一个定时的事件触发器，它们在合适的时间把一些JS代码塞到JS引擎的队列中，然后JS会逐个处理队列中的事件。</p>\n<h2 id=\"二、Web-Worker-简介\"><a href=\"#二、Web-Worker-简介\" class=\"headerlink\" title=\"二、Web Worker 简介\"></a>二、Web Worker 简介</h2><p>在HTML5中，引入了Web Worker这个概念。它能够在另外一个线程中执行计算密集的JS代码而不引起页面卡死，这是真正的多线程。然而为了保证线程安全，Worker中的代码是不能访问DOM的。具体解释请看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/Worker\" target=\"_blank\" rel=\"external\">火狐开发文档-Worker</a></p>\n<p>官方的解释：<br>Web Workers是一种机制，通过它可以使一个脚本操作在与Web应用程序的主执行线程分离的后台线程中运行。这样做的优点是可以在单独的线程中执行繁琐的处理，让主（通常是UI）线程运行而不被阻塞/减慢。</p>\n<p>特别提醒，运行worker多线程，需要在服务器环境下，所以在跑一下demo时，请自行搭建运行环境。</p>\n<h2 id=\"三、Worker基本用法\"><a href=\"#三、Worker基本用法\" class=\"headerlink\" title=\"三、Worker基本用法\"></a>三、Worker基本用法</h2><p>首先，先了解下worker常用的两个方法<code>onmessage</code>和<code>postMessage</code>，<code>onmessage</code>是监听worker文件返回数据的回调方法，<code>postMessage</code>是worker返回页面的数据的方法。示例如下：</p>\n<p>页面文件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn1\"</span>&gt;</span>有worker<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn2\"</span>&gt;</span>无worker<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"time\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"output\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 400px; border: 1px solid #ccc; overflow-y: auto; word-break: break-all;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span>(Worker) !== <span class=\"string\">\"undefined\"</span>)&#123;</div><div class=\"line\">  <span class=\"comment\">// var _worker = new Worker('demo2.js');</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workerInit</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span>(Worker) !== <span class=\"string\">\"undefined\"</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _html = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> _worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'demo2.js'</span>);</div><div class=\"line\"></div><div class=\"line\">    _worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(event.data.n)&#123;</div><div class=\"line\">        _html.push(event.data.n);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>(event.data.t)&#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'output'</span>).innerHTML = _html.join(<span class=\"string\">','</span>);</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'time'</span>).innerHTML = <span class=\"string\">'耗时：'</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - event.data.t + <span class=\"string\">'毫秒'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'不支持 Worker'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> btn1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn1'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> btn2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn2'</span>);</div><div class=\"line\"></div><div class=\"line\">btn1.onclick = workerInit;</div><div class=\"line\">btn2.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> _t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">  <span class=\"keyword\">var</span> _h = [];</div><div class=\"line\"></div><div class=\"line\">  abc:<span class=\"keyword\">while</span>(n &lt; <span class=\"number\">99999</span>)&#123;</div><div class=\"line\">    ++n;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 查找质数（在大于1的自然数中，除了1和该整数自身外，无法被其他自然数整除的数）</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">Math</span>.sqrt(n); i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(n%i == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span> abc;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    _h.push(n);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'output'</span>).innerHTML = _h.join(<span class=\"string\">','</span>);</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'time'</span>).innerHTML = <span class=\"string\">'耗时：'</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - _t + <span class=\"string\">'毫秒'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>tips:发现个奇怪的问题，如上代码第<code>9</code>行，在外部定义了worker之后，在<code>workerInit</code>方法中无法正常调用，而且并没有报错。</p>\n<p>worker文件<code>demo2.js</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> _t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"></div><div class=\"line\">search:<span class=\"keyword\">while</span>(n &lt; <span class=\"number\">99999</span>)&#123;</div><div class=\"line\">  ++n;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 查找质数（在大于1的自然数中，除了1和该整数自身外，无法被其他自然数整除的数）</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">Math</span>.sqrt(n); i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n%i == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">continue</span> search;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// console.log(new Date().getTime() - _t, n);</span></div><div class=\"line\">  <span class=\"comment\">// document.getElementById('output').innerHTML += (n + '，');</span></div><div class=\"line\">  postMessage(&#123;</div><div class=\"line\">    <span class=\"attr\">n</span>: n</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">postMessage(&#123;</div><div class=\"line\">  <span class=\"attr\">t</span>: _t</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>以上代码中，在1-99999中查找质数，每找到一个，使用<code>postMessage</code>返回一次，循环结束后，返回循环开始的时间。</p>\n<p>应用worker与原生js处理相同业务所需的时间是多少呢？<br>应用worker五次运行分别耗时（平均204.8ms）：204ms，216ms，197ms，208ms，199ms<br>原生js五次运行分别耗时（平均32.4ms）：40ms，38ms，24ms，32ms，28ms</p>\n<p>以执行速度来看，查找1-99999中的质数，原生js比worker快大约6倍</p>\n<p>当然这并不意味这worker是个无用的功能，在某些应用场景还是很适用的。</p>\n<p>最后worker除了<code>onmessage</code>和<code>postMessage</code>这两个方法，还有其他的约束及api，具体请自行查看文档<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/Worker\" target=\"_blank\" rel=\"external\">火狐开发文档-Worker</a></p>\n<h2 id=\"四、兼容问题\"><a href=\"#四、兼容问题\" class=\"headerlink\" title=\"四、兼容问题\"></a>四、兼容问题</h2><p>无法避免的兼容问题，除了worker对象的兼容，还有worker api的兼容也各不同，以下是worker对象的兼容。</p>\n<p>桌面端：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Feature</th>\n<th style=\"text-align:center\">Chrome</th>\n<th style=\"text-align:center\">Firefox (Gecko)</th>\n<th style=\"text-align:center\">Internet Explorer</th>\n<th style=\"text-align:center\">Opera</th>\n<th style=\"text-align:center\">Safari (WebKit)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Basic support</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">3.5</td>\n<td style=\"text-align:center\">10.0</td>\n<td style=\"text-align:center\">10.6</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n<p>移动端：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Feature</th>\n<th style=\"text-align:center\">Android</th>\n<th style=\"text-align:center\">Firefox Mobile (Gecko)</th>\n<th style=\"text-align:center\">Firefox OS (Gecko)</th>\n<th style=\"text-align:center\">IE Phone</th>\n<th style=\"text-align:center\">Opera Mobile</th>\n<th style=\"text-align:center\">Safari Mobile</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Basic support</td>\n<td style=\"text-align:center\">4.4</td>\n<td style=\"text-align:center\">3.5</td>\n<td style=\"text-align:center\">1.0.1</td>\n<td style=\"text-align:center\">10.0</td>\n<td style=\"text-align:center\">11.5</td>\n<td style=\"text-align:center\">5.1</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<p>总所周知，javascript是单线程的，当一个函数执行的时候，JS引擎会锁住DOM树，其他事件的响应代码只能在队列中等待，并且此时页面卡死。<br>如果某些脚本比较复杂、耗时，那么将会阻塞javascript继续执行，甚至导致浏览器失去响应。<br>那么要实现javascript的多线程，ajax异步请求可以开辟一个新的线程来处理请求的业务，并不是真正意义上的多线程。<br>在HTML5中，引入了Web Worker这个概念，它能够在另外一个线程中执行计算密集的JS代码而不引起页面卡死，这是真正的多线程。</p>","more":"<h2 id=\"一、setTimeout和setInterval\"><a href=\"#一、setTimeout和setInterval\" class=\"headerlink\" title=\"一、setTimeout和setInterval\"></a>一、setTimeout和setInterval</h2><p>使用定时器看似是可以多个事件同时处理，其实并非是多线程的。</p>\n<p>定时器只是一个定时的事件触发器，它们在合适的时间把一些JS代码塞到JS引擎的队列中，然后JS会逐个处理队列中的事件。</p>\n<h2 id=\"二、Web-Worker-简介\"><a href=\"#二、Web-Worker-简介\" class=\"headerlink\" title=\"二、Web Worker 简介\"></a>二、Web Worker 简介</h2><p>在HTML5中，引入了Web Worker这个概念。它能够在另外一个线程中执行计算密集的JS代码而不引起页面卡死，这是真正的多线程。然而为了保证线程安全，Worker中的代码是不能访问DOM的。具体解释请看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/Worker\">火狐开发文档-Worker</a></p>\n<p>官方的解释：<br>Web Workers是一种机制，通过它可以使一个脚本操作在与Web应用程序的主执行线程分离的后台线程中运行。这样做的优点是可以在单独的线程中执行繁琐的处理，让主（通常是UI）线程运行而不被阻塞/减慢。</p>\n<p>特别提醒，运行worker多线程，需要在服务器环境下，所以在跑一下demo时，请自行搭建运行环境。</p>\n<h2 id=\"三、Worker基本用法\"><a href=\"#三、Worker基本用法\" class=\"headerlink\" title=\"三、Worker基本用法\"></a>三、Worker基本用法</h2><p>首先，先了解下worker常用的两个方法<code>onmessage</code>和<code>postMessage</code>，<code>onmessage</code>是监听worker文件返回数据的回调方法，<code>postMessage</code>是worker返回页面的数据的方法。示例如下：</p>\n<p>页面文件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn1\"</span>&gt;</span>有worker<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn2\"</span>&gt;</span>无worker<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"time\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"output\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 400px; border: 1px solid #ccc; overflow-y: auto; word-break: break-all;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span>(Worker) !== <span class=\"string\">\"undefined\"</span>)&#123;</div><div class=\"line\">  <span class=\"comment\">// var _worker = new Worker('demo2.js');</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workerInit</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span>(Worker) !== <span class=\"string\">\"undefined\"</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _html = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> _worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'demo2.js'</span>);</div><div class=\"line\"></div><div class=\"line\">    _worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(event.data.n)&#123;</div><div class=\"line\">        _html.push(event.data.n);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span>(event.data.t)&#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'output'</span>).innerHTML = _html.join(<span class=\"string\">','</span>);</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'time'</span>).innerHTML = <span class=\"string\">'耗时：'</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - event.data.t + <span class=\"string\">'毫秒'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'不支持 Worker'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> btn1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn1'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> btn2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn2'</span>);</div><div class=\"line\"></div><div class=\"line\">btn1.onclick = workerInit;</div><div class=\"line\">btn2.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> _t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">  <span class=\"keyword\">var</span> _h = [];</div><div class=\"line\"></div><div class=\"line\">  abc:<span class=\"keyword\">while</span>(n &lt; <span class=\"number\">99999</span>)&#123;</div><div class=\"line\">    ++n;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 查找质数（在大于1的自然数中，除了1和该整数自身外，无法被其他自然数整除的数）</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">Math</span>.sqrt(n); i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(n%i == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span> abc;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    _h.push(n);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'output'</span>).innerHTML = _h.join(<span class=\"string\">','</span>);</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'time'</span>).innerHTML = <span class=\"string\">'耗时：'</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - _t + <span class=\"string\">'毫秒'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>tips:发现个奇怪的问题，如上代码第<code>9</code>行，在外部定义了worker之后，在<code>workerInit</code>方法中无法正常调用，而且并没有报错。</p>\n<p>worker文件<code>demo2.js</code>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> _t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"></div><div class=\"line\">search:<span class=\"keyword\">while</span>(n &lt; <span class=\"number\">99999</span>)&#123;</div><div class=\"line\">  ++n;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 查找质数（在大于1的自然数中，除了1和该整数自身外，无法被其他自然数整除的数）</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">Math</span>.sqrt(n); i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(n%i == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">continue</span> search;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// console.log(new Date().getTime() - _t, n);</span></div><div class=\"line\">  <span class=\"comment\">// document.getElementById('output').innerHTML += (n + '，');</span></div><div class=\"line\">  postMessage(&#123;</div><div class=\"line\">    <span class=\"attr\">n</span>: n</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">postMessage(&#123;</div><div class=\"line\">  <span class=\"attr\">t</span>: _t</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>以上代码中，在1-99999中查找质数，每找到一个，使用<code>postMessage</code>返回一次，循环结束后，返回循环开始的时间。</p>\n<p>应用worker与原生js处理相同业务所需的时间是多少呢？<br>应用worker五次运行分别耗时（平均204.8ms）：204ms，216ms，197ms，208ms，199ms<br>原生js五次运行分别耗时（平均32.4ms）：40ms，38ms，24ms，32ms，28ms</p>\n<p>以执行速度来看，查找1-99999中的质数，原生js比worker快大约6倍</p>\n<p>当然这并不意味这worker是个无用的功能，在某些应用场景还是很适用的。</p>\n<p>最后worker除了<code>onmessage</code>和<code>postMessage</code>这两个方法，还有其他的约束及api，具体请自行查看文档<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/Worker\">火狐开发文档-Worker</a></p>\n<h2 id=\"四、兼容问题\"><a href=\"#四、兼容问题\" class=\"headerlink\" title=\"四、兼容问题\"></a>四、兼容问题</h2><p>无法避免的兼容问题，除了worker对象的兼容，还有worker api的兼容也各不同，以下是worker对象的兼容。</p>\n<p>桌面端：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Feature</th>\n<th style=\"text-align:center\">Chrome</th>\n<th style=\"text-align:center\">Firefox (Gecko)</th>\n<th style=\"text-align:center\">Internet Explorer</th>\n<th style=\"text-align:center\">Opera</th>\n<th style=\"text-align:center\">Safari (WebKit)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Basic support</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">3.5</td>\n<td style=\"text-align:center\">10.0</td>\n<td style=\"text-align:center\">10.6</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n<p>移动端：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Feature</th>\n<th style=\"text-align:center\">Android</th>\n<th style=\"text-align:center\">Firefox Mobile (Gecko)</th>\n<th style=\"text-align:center\">Firefox OS (Gecko)</th>\n<th style=\"text-align:center\">IE Phone</th>\n<th style=\"text-align:center\">Opera Mobile</th>\n<th style=\"text-align:center\">Safari Mobile</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Basic support</td>\n<td style=\"text-align:center\">4.4</td>\n<td style=\"text-align:center\">3.5</td>\n<td style=\"text-align:center\">1.0.1</td>\n<td style=\"text-align:center\">10.0</td>\n<td style=\"text-align:center\">11.5</td>\n<td style=\"text-align:center\">5.1</td>\n</tr>\n</tbody>\n</table>"},{"title":"hexo本地开发时默认的4000端口无法访问","date":"2017-12-29T08:56:31.000Z","_content":"\n好久没有写博客，事情的起因是这样的：\n\n今天在阿里云买了个新域名，然后进行备案，巴拉巴拉一切资料提交之后，等待审核。\n\n阿里的速度还是很快的，下午的时候就来电话了，跟我说我的博客底部没有备案号……\n\n<!-- more -->\n\n于是乎，重新打开博客项目，命令全忘光了，赶紧百度一下，嗯嗯，找到底部代码`footer.ejs`修改完毕，输入`hexo s`启动本地服务看看效果。\n\n然而打开`http://localhost:4000/`死活没反应，命令行也无错误提示，怎么回事？\n\n速度百度，查到原因了，原来是端口被占用，修改端口重启启动，分分钟解决问题。\n\n```javascript\n// 启动hexo服务，设置端口为5000\nhexo s -p 5000\n```\n\n然而这个是临时修改，最后还是在配置文件中把端口配置好，免得每次都要输入。\n\n打开`_confit.yml`配置文件：\n\n```javascript\n# server\nserver:\n  port: 5000\n```\n\n大功告成了 ，开心的玩耍吧~\n\n[参考：温浩然的博客](http://blog.csdn.net/u012246342/article/details/51543370)\n[参考：segmentfault的答案](https://segmentfault.com/q/1010000008546859?_ea=1678427)","source":"_posts/2017-12-29-hexo本地开发时默认的4000端口无法访问.md","raw":"---\ntitle: hexo本地开发时默认的4000端口无法访问\ndate: 2017-12-29 16:56:31\ntags: hexo\ncategories: 填坑\n---\n\n好久没有写博客，事情的起因是这样的：\n\n今天在阿里云买了个新域名，然后进行备案，巴拉巴拉一切资料提交之后，等待审核。\n\n阿里的速度还是很快的，下午的时候就来电话了，跟我说我的博客底部没有备案号……\n\n<!-- more -->\n\n于是乎，重新打开博客项目，命令全忘光了，赶紧百度一下，嗯嗯，找到底部代码`footer.ejs`修改完毕，输入`hexo s`启动本地服务看看效果。\n\n然而打开`http://localhost:4000/`死活没反应，命令行也无错误提示，怎么回事？\n\n速度百度，查到原因了，原来是端口被占用，修改端口重启启动，分分钟解决问题。\n\n```javascript\n// 启动hexo服务，设置端口为5000\nhexo s -p 5000\n```\n\n然而这个是临时修改，最后还是在配置文件中把端口配置好，免得每次都要输入。\n\n打开`_confit.yml`配置文件：\n\n```javascript\n# server\nserver:\n  port: 5000\n```\n\n大功告成了 ，开心的玩耍吧~\n\n[参考：温浩然的博客](http://blog.csdn.net/u012246342/article/details/51543370)\n[参考：segmentfault的答案](https://segmentfault.com/q/1010000008546859?_ea=1678427)","slug":"hexo本地开发时默认的4000端口无法访问","published":1,"updated":"2017-12-29T09:10:47.370Z","_id":"cjbroyd7p000bposb1rvvzw6n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>好久没有写博客，事情的起因是这样的：</p>\n<p>今天在阿里云买了个新域名，然后进行备案，巴拉巴拉一切资料提交之后，等待审核。</p>\n<p>阿里的速度还是很快的，下午的时候就来电话了，跟我说我的博客底部没有备案号……</p>\n<a id=\"more\"></a>\n<p>于是乎，重新打开博客项目，命令全忘光了，赶紧百度一下，嗯嗯，找到底部代码<code>footer.ejs</code>修改完毕，输入<code>hexo s</code>启动本地服务看看效果。</p>\n<p>然而打开<code>http://localhost:4000/</code>死活没反应，命令行也无错误提示，怎么回事？</p>\n<p>速度百度，查到原因了，原来是端口被占用，修改端口重启启动，分分钟解决问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 启动hexo服务，设置端口为5000</span></div><div class=\"line\">hexo s -p <span class=\"number\">5000</span></div></pre></td></tr></table></figure>\n<p>然而这个是临时修改，最后还是在配置文件中把端口配置好，免得每次都要输入。</p>\n<p>打开<code>_confit.yml</code>配置文件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># server</div><div class=\"line\">server:</div><div class=\"line\">  port: 5000</div></pre></td></tr></table></figure>\n<p>大功告成了 ，开心的玩耍吧~</p>\n<p><a href=\"http://blog.csdn.net/u012246342/article/details/51543370\" target=\"_blank\" rel=\"external\">参考：温浩然的博客</a><br><a href=\"https://segmentfault.com/q/1010000008546859?_ea=1678427\" target=\"_blank\" rel=\"external\">参考：segmentfault的答案</a></p>\n","excerpt":"<p>好久没有写博客，事情的起因是这样的：</p>\n<p>今天在阿里云买了个新域名，然后进行备案，巴拉巴拉一切资料提交之后，等待审核。</p>\n<p>阿里的速度还是很快的，下午的时候就来电话了，跟我说我的博客底部没有备案号……</p>","more":"<p>于是乎，重新打开博客项目，命令全忘光了，赶紧百度一下，嗯嗯，找到底部代码<code>footer.ejs</code>修改完毕，输入<code>hexo s</code>启动本地服务看看效果。</p>\n<p>然而打开<code>http://localhost:4000/</code>死活没反应，命令行也无错误提示，怎么回事？</p>\n<p>速度百度，查到原因了，原来是端口被占用，修改端口重启启动，分分钟解决问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 启动hexo服务，设置端口为5000</span></div><div class=\"line\">hexo s -p <span class=\"number\">5000</span></div></pre></td></tr></table></figure>\n<p>然而这个是临时修改，最后还是在配置文件中把端口配置好，免得每次都要输入。</p>\n<p>打开<code>_confit.yml</code>配置文件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># server</div><div class=\"line\">server:</div><div class=\"line\">  port: 5000</div></pre></td></tr></table></figure>\n<p>大功告成了 ，开心的玩耍吧~</p>\n<p><a href=\"http://blog.csdn.net/u012246342/article/details/51543370\">参考：温浩然的博客</a><br><a href=\"https://segmentfault.com/q/1010000008546859?_ea=1678427\">参考：segmentfault的答案</a></p>"},{"title":"使用webpack构建时给window绑定事件的坑","date":"2017-03-28T07:45:25.000Z","_content":"\n使用webpack进行构建，给window绑定了onload的事件，结果竟然死活不触发！各种排除后发现问题所在...\n\n<!-- more -->\n\n业务js文件`index.js`\n\n```javascript\nvar $ = require('jquery');\n\n$(function(){\n    // 在这里绑定，无效\n    $(window).on('load', function(){\n        console.log('页面加载完成了~');\n    });\n})\n```\n\n打开页面，然后控制台并没有打印出“页面加载完成了~”\n\n难道是使用jquery进行绑定的原因导致事件绑定无效？于是改了代码：\n\n```javascript\nvar $ = require('jquery');\n\n$(function(){\n    // 在这里绑定，还是无效\n    window.onload = function(){\n        console.log('页面加载完成了~');\n    };\n})\n```\n\n控制台依然没有打印出预期的结果，苦思良久，改成\n\n```javascript\nvar $ = require('jquery');\n\n// 在这里绑定，有效\n$(window).on('load', function(){\n    console.log('页面加载完成了~ 1');\n});\n\n// 在这里绑定，也有效\nwindow.onload = function(){\n    console.log('页面加载完成了~ 2');\n};\n\n$(function(){\n    \n})\n```\n\n那看来是'$(function(){})'这一段代码的问题了，这段代码并不难理解，当页面的dom结构加载完毕则执行，刚入门是使用'script'标签引入jquery，并没有这样的问题出现。\n\n那么现在看来是使用webpack进行构建的并发症了，至于原因，并没有深究的意愿。\n\n现在页面的js基本都是放在页面底部，程序执行到这里，其实意味着dom结构以及渲染完毕了，个人觉得在js中写'$(function(){})'是没有必要了的","source":"_posts/2017-03-28-使用webpack构建时给window绑定事件的坑.md","raw":"---\ntitle: 使用webpack构建时给window绑定事件的坑\ndate: 2017-03-28 15:45:25\ntags: \n- webpack\n- jquery\ncategories: 填坑\n---\n\n使用webpack进行构建，给window绑定了onload的事件，结果竟然死活不触发！各种排除后发现问题所在...\n\n<!-- more -->\n\n业务js文件`index.js`\n\n```javascript\nvar $ = require('jquery');\n\n$(function(){\n    // 在这里绑定，无效\n    $(window).on('load', function(){\n        console.log('页面加载完成了~');\n    });\n})\n```\n\n打开页面，然后控制台并没有打印出“页面加载完成了~”\n\n难道是使用jquery进行绑定的原因导致事件绑定无效？于是改了代码：\n\n```javascript\nvar $ = require('jquery');\n\n$(function(){\n    // 在这里绑定，还是无效\n    window.onload = function(){\n        console.log('页面加载完成了~');\n    };\n})\n```\n\n控制台依然没有打印出预期的结果，苦思良久，改成\n\n```javascript\nvar $ = require('jquery');\n\n// 在这里绑定，有效\n$(window).on('load', function(){\n    console.log('页面加载完成了~ 1');\n});\n\n// 在这里绑定，也有效\nwindow.onload = function(){\n    console.log('页面加载完成了~ 2');\n};\n\n$(function(){\n    \n})\n```\n\n那看来是'$(function(){})'这一段代码的问题了，这段代码并不难理解，当页面的dom结构加载完毕则执行，刚入门是使用'script'标签引入jquery，并没有这样的问题出现。\n\n那么现在看来是使用webpack进行构建的并发症了，至于原因，并没有深究的意愿。\n\n现在页面的js基本都是放在页面底部，程序执行到这里，其实意味着dom结构以及渲染完毕了，个人觉得在js中写'$(function(){})'是没有必要了的","slug":"使用webpack构建时给window绑定事件的坑","published":1,"updated":"2017-03-28T10:10:13.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbroyd8n0015posb4oaf67tj","content":"<p>使用webpack进行构建，给window绑定了onload的事件，结果竟然死活不触发！各种排除后发现问题所在…</p>\n<a id=\"more\"></a>\n<p>业务js文件<code>index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在这里绑定，无效</span></div><div class=\"line\">    $(<span class=\"built_in\">window</span>).on(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>打开页面，然后控制台并没有打印出“页面加载完成了~”</p>\n<p>难道是使用jquery进行绑定的原因导致事件绑定无效？于是改了代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在这里绑定，还是无效</span></div><div class=\"line\">    <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>控制台依然没有打印出预期的结果，苦思良久，改成</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在这里绑定，有效</span></div><div class=\"line\">$(<span class=\"built_in\">window</span>).on(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~ 1'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在这里绑定，也有效</span></div><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~ 2'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>那看来是’$(function(){})’这一段代码的问题了，这段代码并不难理解，当页面的dom结构加载完毕则执行，刚入门是使用’script’标签引入jquery，并没有这样的问题出现。</p>\n<p>那么现在看来是使用webpack进行构建的并发症了，至于原因，并没有深究的意愿。</p>\n<p>现在页面的js基本都是放在页面底部，程序执行到这里，其实意味着dom结构以及渲染完毕了，个人觉得在js中写’$(function(){})’是没有必要了的</p>\n","excerpt":"<p>使用webpack进行构建，给window绑定了onload的事件，结果竟然死活不触发！各种排除后发现问题所在…</p>","more":"<p>业务js文件<code>index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在这里绑定，无效</span></div><div class=\"line\">    $(<span class=\"built_in\">window</span>).on(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>打开页面，然后控制台并没有打印出“页面加载完成了~”</p>\n<p>难道是使用jquery进行绑定的原因导致事件绑定无效？于是改了代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在这里绑定，还是无效</span></div><div class=\"line\">    <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>控制台依然没有打印出预期的结果，苦思良久，改成</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在这里绑定，有效</span></div><div class=\"line\">$(<span class=\"built_in\">window</span>).on(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~ 1'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在这里绑定，也有效</span></div><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~ 2'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>那看来是’$(function(){})’这一段代码的问题了，这段代码并不难理解，当页面的dom结构加载完毕则执行，刚入门是使用’script’标签引入jquery，并没有这样的问题出现。</p>\n<p>那么现在看来是使用webpack进行构建的并发症了，至于原因，并没有深究的意愿。</p>\n<p>现在页面的js基本都是放在页面底部，程序执行到这里，其实意味着dom结构以及渲染完毕了，个人觉得在js中写’$(function(){})’是没有必要了的</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjbroyd6v0000posbc7a74zt9","category_id":"cjbroyd750002posb6yr2m67x","_id":"cjbroyd7p000aposb4u40inr5"},{"post_id":"cjbroyd7o0009posbb2oxv4cu","category_id":"cjbroyd750002posb6yr2m67x","_id":"cjbroyd7y000eposb3x8dz218"},{"post_id":"cjbroyd710001posbruoj0ce1","category_id":"cjbroyd7m0007posb6tsrb7sq","_id":"cjbroyd7z000gposbphrth1xl"},{"post_id":"cjbroyd7p000bposb1rvvzw6n","category_id":"cjbroyd7m0007posb6tsrb7sq","_id":"cjbroyd81000jposbc1anq17k"},{"post_id":"cjbroyd7c0005posbweq5oyc3","category_id":"cjbroyd7v000cposb2un3b37q","_id":"cjbroyd85000pposbafwlt0kl"},{"post_id":"cjbroyd7c0005posbweq5oyc3","category_id":"cjbroyd80000iposbj8lfnin0","_id":"cjbroyd85000rposbqlqqpkeo"},{"post_id":"cjbroyd8n0015posb4oaf67tj","category_id":"cjbroyd7m0007posb6tsrb7sq","_id":"cjbroyd8t0018posb593ja8us"}],"PostTag":[{"post_id":"cjbroyd6v0000posbc7a74zt9","tag_id":"cjbroyd790003posb5va4evek","_id":"cjbroyd80000hposbtbcpj7o0"},{"post_id":"cjbroyd6v0000posbc7a74zt9","tag_id":"cjbroyd7n0008posbcp1ry6fl","_id":"cjbroyd81000kposbib47qcfe"},{"post_id":"cjbroyd6v0000posbc7a74zt9","tag_id":"cjbroyd7w000dposb5fy30lmz","_id":"cjbroyd83000mposbdg6mev8u"},{"post_id":"cjbroyd710001posbruoj0ce1","tag_id":"cjbroyd7z000fposb9fchqqd7","_id":"cjbroyd84000nposbuehsw4mv"},{"post_id":"cjbroyd7c0005posbweq5oyc3","tag_id":"cjbroyd83000lposb4n9fuvln","_id":"cjbroyd85000qposbqhhqd9kw"},{"post_id":"cjbroyd7k0006posbe6vq0c9v","tag_id":"cjbroyd84000oposbxa5bz8xb","_id":"cjbroyd88000vposbb5ry73tb"},{"post_id":"cjbroyd7k0006posbe6vq0c9v","tag_id":"cjbroyd86000sposb3n8p2jmm","_id":"cjbroyd88000wposbyuux11ct"},{"post_id":"cjbroyd7k0006posbe6vq0c9v","tag_id":"cjbroyd87000tposbted07hrc","_id":"cjbroyd8a000yposbs9x28l0s"},{"post_id":"cjbroyd7o0009posbb2oxv4cu","tag_id":"cjbroyd87000uposbla7bqc8o","_id":"cjbroyd8c0011posbhq3ddcw0"},{"post_id":"cjbroyd7o0009posbb2oxv4cu","tag_id":"cjbroyd88000xposb0oxvj9ph","_id":"cjbroyd8c0012posb7vocul45"},{"post_id":"cjbroyd7o0009posbb2oxv4cu","tag_id":"cjbroyd8a000zposbsfbbi094","_id":"cjbroyd8d0013posbf8evjfdp"},{"post_id":"cjbroyd7p000bposb1rvvzw6n","tag_id":"cjbroyd7z000fposb9fchqqd7","_id":"cjbroyd8d0014posb3hrx317d"},{"post_id":"cjbroyd8n0015posb4oaf67tj","tag_id":"cjbroyd8s0017posbi2gob6p8","_id":"cjbroyd8x001aposbkfbf0tkr"},{"post_id":"cjbroyd8n0015posb4oaf67tj","tag_id":"cjbroyd8v0019posbqi5eu8gl","_id":"cjbroyd8x001bposb1n0e7kbt"}],"Tag":[{"name":"nodejs","_id":"cjbroyd790003posb5va4evek"},{"name":"express","_id":"cjbroyd7n0008posbcp1ry6fl"},{"name":"router","_id":"cjbroyd7w000dposb5fy30lmz"},{"name":"hexo","_id":"cjbroyd7z000fposb9fchqqd7"},{"name":"vuejs","_id":"cjbroyd83000lposb4n9fuvln"},{"name":"github","_id":"cjbroyd84000oposbxa5bz8xb"},{"name":"github pasges","_id":"cjbroyd86000sposb3n8p2jmm"},{"name":"cname","_id":"cjbroyd87000tposbted07hrc"},{"name":"html5","_id":"cjbroyd87000uposbla7bqc8o"},{"name":"workers","_id":"cjbroyd88000xposb0oxvj9ph"},{"name":"web api","_id":"cjbroyd8a000zposbsfbbi094"},{"name":"webpack","_id":"cjbroyd8s0017posbi2gob6p8"},{"name":"jquery","_id":"cjbroyd8v0019posbqi5eu8gl"}]}}